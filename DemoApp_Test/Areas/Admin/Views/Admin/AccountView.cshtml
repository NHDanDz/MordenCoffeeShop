@model DemoApp_Test.Models.AccountSearchViewModel
@{
    ViewData["Title"] = "Account Management";
    Layout = "../Shared/_Layout.cshtml";
}
<script src="~/Admin/user/js/main.js"></script>

@functions {
    public string FormatDate(DateTime? date, string format = "dd/MM/yyyy")
    {
        if (date == null)
        {
            return "Không có ngày";
        }
        return date.Value.ToString(format);
    }
}

<style>
    .required {
        color: red;
    }
    .is-invalid {
        border-color: #dc3545;
    }

    .invalid-feedback {
        display: block;
        color: #dc3545;
        font-size: 0.875em;
        margin-top: 0.25rem;
    }

    .alert {
        padding: 0.75rem 1.25rem;
        margin-bottom: 1rem;
        border: 1px solid transparent;
        border-radius: 0.25rem;
    }

    .alert-danger {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }

    .alert-success {
        color: #155724;
        background-color: #d4edda;
        border-color: #c3e6cb;
    }
</style>
<style>
    .table {
        border: 1px solid #dee2e6;
        background-color: #ffffff;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        margin-bottom: 1rem;
    }

        .table thead th {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-bottom: 2px solid #dee2e6;
            padding: 12px 8px;
            font-weight: 600;
            color: #333;
            vertical-align: middle;
            text-align: center;
        }

        .table td {
            border: 1px solid #dee2e6;
            padding: 12px 8px;
            vertical-align: middle;
        }

        .table tbody tr:hover {
            background-color: #f5f5f5;
        }

        .table tbody tr:nth-of-type(odd) {
            background-color: rgba(0, 0, 0, 0.02);
        }

    .tooltip-container {
        position: relative;
        display: inline-block;
    }

        .tooltip-container .tooltip-text {
            visibility: hidden;
            width: 120px;
            background-color: black;
            color: #fff;
            text-align: center;
            padding: 5px;
            border-radius: 5px;
            position: absolute;
            bottom: 125%;
            left: 50%;
            transform: translateX(-50%);
            z-index: 1;
            opacity: 0;
            transition: opacity 0.3s;
        }

        .tooltip-container:hover .tooltip-text {
            visibility: visible;
            opacity: 1;
        }

    .btn-link i {
        color: #A2A1A1;
    }

    .btn-link:hover .mdi-table-edit {
        color: #28a745;
    }

    .btn-link:hover .mdi-delete-empty {
        color: #F37D7D;
    }
</style>

<div class="page-header" style="margin-bottom: 20px">
    <h2 class="page-title" style="font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;">
        Danh Mục Tài Khoản
    </h2>
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a>Quản lý</a></li>
            <li class="breadcrumb-item active" aria-current="page">Quản lý tài khoản</li>
        </ol>
    </nav>
</div>
<style>
    .account-stats-container {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 1.5rem;
        margin: 1.5rem 0;
    }

    .stat-card {
        background: white;
        border-radius: 10px;
        padding: 1.5rem;
        position: relative;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        display: flex;
        align-items: flex-start;
        justify-content: space-between;
    }

        .stat-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

    .stat-info {
        flex-grow: 1;
    }

    .stat-icon {
        width: 48px;
        height: 48px;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-left: 1rem;
    }

        .stat-icon i {
            font-size: 1.75rem;
            color: white;
        }

    .total-accounts .stat-icon {
        background: linear-gradient(45deg, #4CAF50, #45a049);
    }

    .admin-accounts .stat-icon {
        background: linear-gradient(45deg, #9c27b0, #7b1fa2);
    }

    .staff-accounts .stat-icon {
        background: linear-gradient(45deg, #2196F3, #1976D2);
    }

    .customer-accounts .stat-icon {
        background: linear-gradient(45deg, #ff9800, #f57c00);
    }

    .stat-label {
        color: #666;
        font-size: 0.9rem;
        margin-bottom: 0.5rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important;
        font-weight: bold;
    }

    .stat-value {
        color: #333;
        font-size: 1.75rem;
        font-weight: bold;
        margin-bottom: 0.25rem;
        font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important;
    }

    .stat-subtitle {
        color: #888;
        font-size: 0.85rem;
        display: flex;
        align-items: center;
        gap: 0.25rem;
    }
     
</style>

<div class="account-stats-container">
    <!-- Tổng số tài khoản -->
    <div class="stat-card total-accounts">
        <div class="stat-info">
            <div class="stat-label">TỔNG TÀI KHOẢN</div>
            <div class="stat-value">@(ViewBag.TotalAccounts?.ToString("N0") ?? "0")</div>
            <div class="stat-subtitle">
                <i class="mdi mdi-account-multiple"></i>
                Tất cả người dùng
            </div>
        </div>
        <div class="stat-icon">
            <i class="mdi mdi-account-group"></i>
        </div>
    </div>

    <!-- Tài khoản Admin -->
    <div class="stat-card admin-accounts">
        <div class="stat-info">
            <div class="stat-label">TÀI KHOẢN ADMIN</div>
            <div class="stat-value">@(ViewBag.AdminCount?.ToString("N0") ?? "0")</div>
            <div class="stat-subtitle">
                <i class="mdi mdi-shield-account"></i>
                Quản trị viên
            </div>
        </div>
        <div class="stat-icon">
            <i class="mdi mdi-shield-crown"></i>
        </div>
    </div>

    <!-- Tài khoản nhân viên -->
    <div class="stat-card staff-accounts">
        <div class="stat-info">
            <div class="stat-label">TÀI KHOẢN NHÂN VIÊN</div>
            <div class="stat-value">@(ViewBag.StaffCount?.ToString("N0") ?? "0")</div>
            <div class="stat-subtitle">
                <i class="mdi mdi-badge-account"></i>
                Nhân viên
            </div>
        </div>
        <div class="stat-icon">
            <i class="mdi mdi-account-tie"></i>
        </div>
    </div>

    <!-- Tài khoản khách hàng -->
    <div class="stat-card customer-accounts">
        <div class="stat-info">
            <div class="stat-label">TÀI KHOẢN KHÁCH HÀNG</div>
            <div class="stat-value">@(ViewBag.CustomerCount?.ToString("N0") ?? "0")</div>
            <div class="stat-subtitle">
                <i class="mdi mdi-account-check"></i>
                Khách hàng
            </div>
        </div>
        <div class="stat-icon">
            <i class="mdi mdi-account-heart"></i>
        </div>
    </div>
</div>
<form class="d-flex flex-column" action="@Url.Action("AccountView", "Admin")" method="get">
    <div class="d-flex align-items-center mb-3" style="width: 100%; gap: 10px;">
        <!-- Search -->
        <div class="input-group" style="flex: 1.45; margin-right: 30px">
            <div class="input-group-prepend bg-transparent">
                <i class="input-group-text border-0 mdi mdi-magnify" style="color: #000000; background: #ffffff;"></i>
            </div>
            <input type="text"
                   class="form-control bg-transparent border-0"
                   maxlength="30"
                   style="color: #000000; background: #ffffff !important; font-size: 15px;"
                   name="query"
                   placeholder="Tìm kiếm theo tên tài khoản, tên khách hàng hoặc email"
                   value="@Model?.Query" />
        </div>

        <!-- Role Filter -->
        <div class="input-group" style="flex: 1; height: 47px !important; font-size: 15px;">
            <select name="role" class="form-control" style="flex: 1; height: 47px !important; font-size: 15px;">
                <option value="">Tất cả chức vụ</option>
                <option value="Admin">Admin</option>
                <option value="Staff">Nhân viên</option>
                <option value="Customer">Khách hàng</option>
            </select>
        </div>
    </div>


    <div class="d-flex justify-content-between align-items-center">
        <div class="d-flex align-items-center">
            <button type="submit" class="btn btn-gradient-success btn-fw" style="padding: 10px 0px 10px 0px !important; min-width: 150px !important; font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;">
                <i class="mdi mdi-magnify"></i> Tìm kiếm
            </button>
            <button type="button" id="clearButton" class="btn btn-gradient-danger btn-fw" style="padding: 10px 0px 10px 0px !important; min-width: 150px !important; margin-left: 10px; font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;">
                <i class="mdi mdi-delete"></i> Đặt lại
            </button>
        </div>
        <div class="d-flex justify-content-end">
            <button type="button" class="btn btn-outline-success btn-icon-text" style="padding: 10px 0px 10px 0px !important; min-width: 150px !important; margin-right: 8px;font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;">
                <i class="fa fa-plus"></i> Thêm tài khoàn
            </button>
            <button type="button" id="bulkDeleteBtn" class="btn btn-outline-danger btn-icon-text" style="padding: 10px 0px 10px 0px !important; min-width: 150px !important; font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;">
                <i class="fa fa-trash-o"></i> Xóa tài khoản
            </button>
        </div>
    </div>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                <input type="checkbox" id="selectAll" class="form-check-input" />
            </th>
            <th class="sortable" data-sort="username" style="font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;">
                Tên đăng nhập <i class="sort-icon mdi mdi-sort"></i>
            </th>
            <th class="sortable" data-sort="clientName" style="font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;">
                Tên người dùng <i class="sort-icon mdi mdi-sort"></i>
            </th>
            <th class="sortable" data-sort="email" style="font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;">
                Email <i class="sort-icon mdi mdi-sort"></i>
            </th>
            <th class="sortable" data-sort="contact" style="font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;">
                Liên hệ <i class="sort-icon mdi mdi-sort"></i>
            </th>
            <th class="sortable" data-sort="location" style="font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;">
                Địa điểm <i class="sort-icon mdi mdi-sort"></i>
            </th>
            <th class="sortable" data-sort="role" style="font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;">
                Vai trò <i class="sort-icon mdi mdi-sort"></i>
            </th>
            <th class="sortable" data-sort="registrationDate" style="font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;">
                Ngày đăng ký <i class="sort-icon mdi mdi-sort"></i>
            </th>
            <th>Phương thức</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var account in Model.Accounts)
        {
            <tr>
                <td>
                    <input type="checkbox" name="selectedAccounts" value="@account.Username" class="form-check-input account-checkbox" />
                </td>
                <td style="text-align: center;">@account.Username</td>
                <td style="text-align: center;">@(account.Client?.Name ?? "-")</td>
                <td style="text-align: center;">@(account.Client?.Gmail ?? "-")</td>
                <td style="text-align: center;">@(account.Client?.Contact ?? "-")</td>
                <td>@(account.Client?.Location ?? "-")</td>
                <td style="text-align: center;">@account.Role</td>
                <td style="text-align: center;">
                    @(account.RegistrationDate.HasValue
                        ? account.RegistrationDate.Value.ToString("yyyy-MM-dd HH:mm")
                        : "N/A")
                    @* @FormatDate(account.RegistrationDate.Value); *@
                </td>
                <td class="d-flex justify-content-start" style="display: flex; justify-content: center !important; align-items: center !important; height: 100% !important; height: 67px !important ">
                    <div class="me-1 tooltip-container" style="display: flex; justify-content: center !important; align-items: center !important; height: 100% !important;">
                        <button type="button"
                                class="btn btn-link p-0 edit-account-btn"
                                data-username="@account.Username"
                                data-client-id="@account.Client_id" style="text-align: center;">
                            <i class="mdi mdi-table-edit btn-icon-prepend" style="font-size: 24px;"></i>
                        </button>
                        <span class="tooltip-text">Quick Edit</span>
                    </div>
                    <div class="tooltip-container">
                        <button type="button"
                                class="btn btn-link p-0 delete-account-btn"
                                data-username="@account.Username">
                            <i class="mdi mdi-delete-empty btn-icon-prepend" style="font-size: 24px;"></i>
                        </button>
                        <span class="tooltip-text">Quick Delete</span>
                    </div>
                </td>
            </tr>
        }
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    </tbody>
</table>

<!-- Pagination -->
<div class="pagination-container mt-4 d-flex justify-content-between align-items-center">
    <div class="page-info">
        Hiển thị từ <span id="startIndex">1</span> đến <span id="endIndex">10</span> của <span id="totalItems">0</span> tài khoản
    </div>
    <ul class="pagination">
        <li class="page-item" id="previousPage">
            <a class="page-link" href="#" aria-label="Previous">
                <span aria-hidden="true">&laquo;</span>
            </a>
        </li>
        <li class="page-item" id="nextPage">
            <a class="page-link" href="#" aria-label="Next">
                <span aria-hidden="true">&raquo;</span>
            </a>
        </li>
    </ul>
</div>

<!-- Create Account Modal -->
<div class="modal fade" id="createAccountModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">Create New Account</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="createAccountForm">
                @Html.AntiForgeryToken()
                <div class="modal-body">
<div class="mb-3">
    <label class="form-label">Username <span class="required">*</span></label>
    <input type="text" class="form-control" name="username" required minlength="3" maxlength="50" title="Username should only contain letters, numbers, and underscores.">
</div>

<div class="mb-3">
    <label class="form-label">Password <span class="required">*</span></label>
    <input type="password" class="form-control" name="password" required minlength="3" maxlength="20" title="Password must be at least 6 characters long and contain both letters and numbers.">
</div>

<div class="mb-3">
    <label class="form-label">Full Name <span class="required">*</span></label>
    <input type="text" class="form-control" name="name" required minlength="3" maxlength="100"  title="Full name should only contain letters and spaces.">
</div>

<div class="mb-3">
    <label class="form-label">Email <span class="required">*</span></label>
    <input type="email" class="form-control" name="email" required>
</div>

<div class="mb-3">
    <label class="form-label">Contact <span class="required">*</span></label>
    <input type="text" class="form-control" name="contact" required minlength="10" maxlength="15" pattern="^\+?[0-9]{10,15}$" title="Contact number must be a valid phone number, including optional '+' sign at the beginning.">
</div>

<div class="mb-3">
    <label class="form-label">Location <span class="required">*</span></label>
    <input type="text" class="form-control" name="location" required minlength="3" maxlength="200">
</div>

<div class="mb-3">
    <label class="form-label">Role <span class="required">*</span></label>
    <select class="form-control" name="role" required>
        <option value="Customer">Customer</option>
        <option value="Staff">Staff</option>
        <option value="Admin">Admin</option>
    </select>
</div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success">Create Account</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Account Modal -->
<div class="modal fade" id="editAccountModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">Edit Account</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="editAccountForm">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <input type="hidden" name="username">
                    <input type="hidden" name="clientId">
                    <div class="mb-3">
                        <label class="form-label">Full Name</label>
                        <input type="text" class="form-control" name="name" maxlength="30" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-control" name="email" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Contact</label>
                        <input type="text" class="form-control" name="contact" maxlength="10" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Location</label>
                        <input type="text" class="form-control" name="location" maxlength="50" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Role</label>
                        <select class="form-control" name="role" required>
                            <option value="Customer">Customer</option>
                            <option value="Staff">Staff</option>
                            <option value="Admin">Admin</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">New Password</label>
                        <input type="password" class="form-control" name="password"  maxlength="15" placeholder="Leave blank to keep current password">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Update Account</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Single Delete Confirmation Modal -->
<div class="modal fade" id="singleDeleteModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-center py-4">
                <i class="mdi mdi-alert-circle text-danger" style="font-size: 48px;"></i>
                <h4 class="mt-3">Are you sure?</h4>
                <p class="text-muted">Do you really want to delete this account?</p>
                <p class="font-weight-bold" id="deleteAccountName"></p>
            </div>
            <form id="deleteForm">
                @Html.AntiForgeryToken()
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">Delete</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Result Modal -->
<div class="modal fade" id="resultModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Result</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="resultMessage"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

<!-- Bulk Delete Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">Confirm Bulk Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-center py-4">
                <i class="mdi mdi-alert-circle text-danger" style="font-size: 48px;"></i>
                <h4 class="mt-3">Are you sure?</h4>
                <p class="text-muted">Do you really want to delete the selected accounts? This process cannot be undone.</p>
                <p class="text-danger"><small>Selected accounts: <span id="selectedAccountCount">0</span></small></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
            </div>
        </div>
    </div>
</div>

<!-- Success Modal for Create Account -->
<div class="modal fade" id="successCreateModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">Success</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-center py-4">
                <i class="mdi mdi-check-circle text-success" style="font-size: 48px;"></i>
                <h4 class="mt-3">Account Created Successfully!</h4>
                <p class="text-muted">The new account has been created and is now ready to use.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" onclick="window.location.reload()">OK</button>
            </div>
        </div>
    </div>
</div>

<!-- Success Modal for Edit Account -->
<div class="modal fade" id="successEditModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">Success</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-center py-4">
                <i class="mdi mdi-check-circle text-primary" style="font-size: 48px;"></i>
                <h4 class="mt-3">Account Updated Successfully!</h4>
                <p class="text-muted">The account information has been updated successfully.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="window.location.reload()">OK</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize all Bootstrap modals
        const modals = document.querySelectorAll('.modal');
        modals.forEach(modal => {
            new bootstrap.Modal(modal);
        });

        // -------------------- Clear Search --------------------
        const clearButton = document.getElementById('clearButton');
        if (clearButton) {
            clearButton.addEventListener('click', () => {
                const inputs = document.querySelectorAll('form input[type="text"], form select');
                inputs.forEach(input => {
                    if (input.tagName.toLowerCase() === 'select') {
                        input.selectedIndex = 0;
                    } else {
                        input.value = '';
                    }
                });
            });
        }

        // -------------------- Create Account --------------------
        const createButton = document.querySelector('.btn-outline-success');
        if (createButton) {
            createButton.addEventListener('click', function() {
                const createModal = new bootstrap.Modal(document.getElementById('createAccountModal'));
                createModal.show();
            });
        }

        const createAccountForm = document.getElementById('createAccountForm');
        if (createAccountForm) {
            createAccountForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                clearErrorMessages();

                const formData = new FormData(this);
                const accountData = {
                    username: formData.get('username').trim(),
                    password: formData.get('password'),
                    name: formData.get('name').trim(),
                    email: formData.get('email').trim(),
                    contact: formData.get('contact').trim(),
                    location: formData.get('location').trim(),
                    role: formData.get('role')
                };

                try {
                    const response = await fetch('/Admin/Admin/CreateAccount', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify(accountData)
                    });

                    const result = await response.json();

                    if (result.success) {
                        const createModal = bootstrap.Modal.getInstance(document.getElementById('createAccountModal'));
                        createModal.hide();
                        const successModal = new bootstrap.Modal(document.getElementById('successCreateModal'));
                        successModal.show();
                    } else {
                        throw new Error(result.message || 'Failed to create account');
                    }
                } catch (error) {
                    alert(error.message);
                }
            });
        }

        // -------------------- Edit Account --------------------
        const editButtons = document.querySelectorAll('.edit-account-btn');
        if (editButtons.length > 0) {
            editButtons.forEach(button => {
                button.addEventListener('click', async function() {
                    const username = this.dataset.username;
                    try {
                        const response = await fetch(`/Admin/Admin/GetAccount?username=${encodeURIComponent(username)}`);
                        const result = await response.json();

                        if (!result.success) {
                            throw new Error(result.message || 'Failed to fetch account details');
                        }

                        const account = result.account;
                        const editForm = document.getElementById('editAccountForm');

                        editForm.querySelector('[name="username"]').value = account.username;
                        editForm.querySelector('[name="clientId"]').value = account.client_id;
                        editForm.querySelector('[name="name"]').value = account.client?.name || '';
                        editForm.querySelector('[name="email"]').value = account.client?.gmail || '';
                        editForm.querySelector('[name="contact"]').value = account.client?.contact || '';
                        editForm.querySelector('[name="location"]').value = account.client?.location || '';
                        editForm.querySelector('[name="role"]').value = account.role;
                        editForm.querySelector('[name="password"]').value = '';

                        const editModal = new bootstrap.Modal(document.getElementById('editAccountModal'));
                        editModal.show();
                    } catch (error) {
                        console.error('Error:', error);
                        alert('Error fetching account details. Please try again.');
                    }
                });
            });
        }

        const editAccountForm = document.getElementById('editAccountForm');
        if (editAccountForm) {
            editAccountForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                clearErrorMessages();

                const submitButton = this.querySelector('button[type="submit"]');
                const originalButtonText = submitButton.innerHTML;

                try {
                    submitButton.disabled = true;
                    submitButton.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Updating...';

                    const formData = new FormData(this);
                    const accountData = {
                        username: formData.get('username'),
                        password: formData.get('password'),
                        name: formData.get('name')?.trim(),
                        email: formData.get('email')?.trim(),
                        contact: formData.get('contact')?.trim(),
                        location: formData.get('location')?.trim(),
                        role: formData.get('role')
                    };

                    const response = await fetch('/Admin/Admin/EditAccount', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify(accountData)
                    });

                    const result = await response.json();

                    if (result.success) {
                        const editModal = bootstrap.Modal.getInstance(document.getElementById('editAccountModal'));
                        editModal.hide();
                        const successModal = new bootstrap.Modal(document.getElementById('successEditModal'));
                        successModal.show();
                    } else {
                        throw new Error(result.message || 'Failed to update account');
                    }
                } catch (error) {
                    alert(error.message);
                } finally {
                    submitButton.disabled = false;
                    submitButton.innerHTML = originalButtonText;
                }
            });
        }

        // -------------------- Delete Account --------------------
        initializeDeleteFunctionality();

    // -------------------- Pagination and Sorting --------------------
    const tableBody = document.querySelector('table tbody');
    if (tableBody) {
        const ITEMS_PER_PAGE = 10;
        let currentPage = 1;
        // Store original rows order
        const originalRows = Array.from(tableBody.querySelectorAll('tr'));
        // Create a copy for working with
        let workingRows = [...originalRows];
        const totalPages = Math.ceil(workingRows.length / ITEMS_PER_PAGE);

        document.getElementById('totalItems').textContent = workingRows.length;

        function showPage(pageNum) {
            const start = (pageNum - 1) * ITEMS_PER_PAGE;
            const end = start + ITEMS_PER_PAGE;

            // Hide all rows first
            workingRows.forEach(row => row.style.display = 'none');
            // Show only rows for current page
            workingRows.slice(start, end).forEach(row => row.style.display = '');

            currentPage = pageNum;
            updatePaginationControls();
        }

        function updatePaginationControls() {
            const previousBtn = document.getElementById('previousPage');
            const nextBtn = document.getElementById('nextPage');
            const totalPages = Math.ceil(workingRows.length / ITEMS_PER_PAGE);

            previousBtn.classList.toggle('disabled', currentPage === 1);
            nextBtn.classList.toggle('disabled', currentPage === totalPages);

            const startIndex = ((currentPage - 1) * ITEMS_PER_PAGE) + 1;
            const endIndex = Math.min(currentPage * ITEMS_PER_PAGE, workingRows.length);

            document.getElementById('startIndex').textContent = startIndex;
            document.getElementById('endIndex').textContent = endIndex;

            updatePageNumbers();
        }

        function updatePageNumbers() {
            const pagination = document.querySelector('.pagination');
            const previousBtn = document.getElementById('previousPage');
            const nextBtn = document.getElementById('nextPage');
            const totalPages = Math.ceil(workingRows.length / ITEMS_PER_PAGE);

            document.querySelectorAll('.page-number').forEach(num => num.remove());

            let startPage = Math.max(1, currentPage - 2);
            let endPage = Math.min(totalPages, currentPage + 2);

            if (currentPage <= 3) {
                endPage = Math.min(5, totalPages);
            } else if (currentPage >= totalPages - 2) {
                startPage = Math.max(1, totalPages - 4);
            }

            for (let i = startPage; i <= endPage; i++) {
                const pageItem = document.createElement('li');
                pageItem.className = `page-item page-number ${i === currentPage ? 'active' : ''}`;
                pageItem.innerHTML = `<a class="page-link" href="#">${i}</a>`;
                pagination.insertBefore(pageItem, nextBtn);

                pageItem.addEventListener('click', (e) => {
                    e.preventDefault();
                    showPage(i);
                });
            }
        }

        // Sorting functionality
        const headers = document.querySelectorAll('th.sortable');
        if (headers.length > 0) {
            let currentSort = { column: null, direction: 'asc' };

            headers.forEach(header => {
                header.addEventListener('click', () => {
                    const column = header.dataset.sort;

                    // Update sort indicators
                    headers.forEach(h => {
                        if (h !== header) h.classList.remove('asc', 'desc');
                    });

                    if (currentSort.column === column) {
                        currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
                        header.classList.toggle('asc', currentSort.direction === 'asc');
                        header.classList.toggle('desc', currentSort.direction === 'desc');
                    } else {
                        currentSort.column = column;
                        currentSort.direction = 'asc';
                        header.classList.remove('desc');
                        header.classList.add('asc');
                    }

                    // Sort the working rows array
                    workingRows.sort((a, b) => {
                        let aValue, bValue;

                        switch(column) {
                            case 'username': aValue = a.cells[1].textContent; bValue = b.cells[1].textContent; break;
                            case 'clientName': aValue = a.cells[2].textContent; bValue = b.cells[2].textContent; break;
                            case 'email': aValue = a.cells[3].textContent; bValue = b.cells[3].textContent; break;
                            case 'contact': aValue = a.cells[4].textContent; bValue = b.cells[4].textContent; break;
                            case 'location': aValue = a.cells[5].textContent; bValue = b.cells[5].textContent; break;
                            case 'role': aValue = a.cells[6].textContent; bValue = b.cells[6].textContent; break;
                            case 'registrationDate':
                                aValue = new Date(a.cells[7].textContent);
                                bValue = new Date(b.cells[7].textContent);
                                break;
                            default: return 0;
                        }

                        if (aValue instanceof Date) {
                            return currentSort.direction === 'asc' ? aValue - bValue : bValue - aValue;
                        }

                        return currentSort.direction === 'asc'
                            ? String(aValue).localeCompare(String(bValue))
                            : String(bValue).localeCompare(String(aValue));
                    });

                    // Clear and rebuild table body with sorted rows
                    while (tableBody.firstChild) {
                        tableBody.removeChild(tableBody.firstChild);
                    }
                    workingRows.forEach(row => tableBody.appendChild(row));

                    // Reset to first page and show
                    showPage(1);
                });
            });
        }

        // Navigation event listeners
        document.getElementById('previousPage')?.addEventListener('click', (e) => {
            e.preventDefault();
            if (currentPage > 1) showPage(currentPage - 1);
        });

        document.getElementById('nextPage')?.addEventListener('click', (e) => {
            e.preventDefault();
            if (currentPage < Math.ceil(workingRows.length / ITEMS_PER_PAGE)) showPage(currentPage + 1);
        });

        // Initialize first page
        showPage(1);
    }
    });

    // -------------------- Helper Functions --------------------
    function clearErrorMessages() {
        document.querySelectorAll('.error-message').forEach(el => el.remove());
        document.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
    }

    function showFieldError(fieldName, message) {
        const field = document.querySelector(`[name="${fieldName}"]`);
        if (field) {
            field.classList.add('is-invalid');
            const errorDiv = document.createElement('div');
            errorDiv.className = 'invalid-feedback error-message';
            errorDiv.textContent = message;
            field.parentNode.appendChild(errorDiv);
        }
    }

    function initializeDeleteFunctionality() {
        // Add your delete functionality here
        // This includes both single and bulk delete operations
        const singleDeleteModal = new bootstrap.Modal(document.getElementById('singleDeleteModal'));
        const resultModal = new bootstrap.Modal(document.getElementById('resultModal'));
        const deleteConfirmModal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));

        // Single delete button handler
        document.querySelectorAll('.delete-account-btn').forEach(button => {
            button.addEventListener('click', function() {
                const username = this.getAttribute('data-username');
                document.getElementById('deleteAccountName').textContent = username;
                document.getElementById('deleteForm').setAttribute('action', `/Admin/Admin/DeleteAccount/${username}`);
                singleDeleteModal.show();
            });
        });

        // Delete form submission
        const deleteForm = document.getElementById('deleteForm');
        if (deleteForm) {
            deleteForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                try {
                    const response = await fetch(this.action, {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        }
                    });

                    singleDeleteModal.hide();

                    if (response.ok) {
                        showResultMessage(true, 'Account deleted successfully');
                    } else {
                        throw new Error('Failed to delete account');
                    }
                } catch (error) {
                    showResultMessage(false, error.message);
                }
            });
        }

        // Bulk delete functionality
        const bulkDeleteBtn = document.getElementById('bulkDeleteBtn');
        if (bulkDeleteBtn) {
            bulkDeleteBtn.addEventListener('click', function() {
                const selectedAccounts = getSelectedAccounts();
                if (selectedAccounts.length === 0) {
                    showResultMessage(false, 'Please select at least one account to delete');
                    return;
                }

                document.getElementById('selectedAccountCount').textContent = selectedAccounts.length;
                deleteConfirmModal.show();
            });
        }

        // Confirm bulk delete
        const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
        if (confirmDeleteBtn) {
            confirmDeleteBtn.addEventListener('click', async function() {
                const selectedAccounts = getSelectedAccounts();
                deleteConfirmModal.hide();

                try {
                    const response = await fetch('/Admin/Admin/BulkDeleteAccounts', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
     'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify(selectedAccounts)
                    });

                    const data = await response.json();

                    if (data.success) {
                        showResultMessage(true, `Successfully deleted ${selectedAccounts.length} accounts`);
                    } else {
                        throw new Error(data.message || 'Failed to delete accounts');
                    }
                } catch (error) {
                    showResultMessage(false, error.message);
                }
            });
        }

        // Select all checkbox functionality
        const selectAllCheckbox = document.getElementById('selectAll');
        if (selectAllCheckbox) {
            selectAllCheckbox.addEventListener('change', function() {
                const checkboxes = document.getElementsByClassName('account-checkbox');
                Array.from(checkboxes).forEach(checkbox => {
                    checkbox.checked = this.checked;
                });
                updateSelectedCount();
            });

            // Update selected count when individual checkboxes change
            document.querySelectorAll('.account-checkbox').forEach(checkbox => {
                checkbox.addEventListener('change', updateSelectedCount);
            });
        }
    }

    function getSelectedAccounts() {
        return Array.from(document.getElementsByClassName('account-checkbox'))
            .filter(cb => cb.checked)
            .map(cb => cb.value);
    }

    function updateSelectedCount() {
        const selectedCount = document.querySelectorAll('.account-checkbox:checked').length;
        const countElement = document.getElementById('selectedAccountCount');
        if (countElement) {
            countElement.textContent = selectedCount;
        }
    }

    function showResultMessage(success, message) {
        const resultModal = new bootstrap.Modal(document.getElementById('resultModal'));
        document.getElementById('resultMessage').innerHTML = `
            <div class="d-flex align-items-center text-${success ? 'success' : 'danger'}">
                <i class="mdi mdi-${success ? 'check' : 'alert'}-circle me-2" style="font-size: 24px;"></i>
                ${message}
            </div>`;
        resultModal.show();

        // Reload page after success
        if (success) {
            document.getElementById('resultModal').addEventListener('hidden.bs.modal', function() {
                window.location.reload();
            }, { once: true });
        }
    }

    // Add any additional utility functions here if needed
</script>