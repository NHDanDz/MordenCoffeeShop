@model DemoApp_Test.Models.LoggingSearchViewModel

@{
    ViewData["Title"] = "Admin Activity Logs";
    Layout = "../Shared/_Layout.cshtml";
}

<style>
    .badge {
        padding: 8px 12px;
        font-size: 12px;
        font-weight: 500;
        border-radius: 4px;
    }

    .table {
        border: 1px solid #dee2e6;
        background-color: #ffffff;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        margin-bottom: 1rem;
    }

        .table thead th {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-bottom: 2px solid #dee2e6;
            padding: 12px 8px;
            font-weight: 600;
            color: #333;
            vertical-align: middle;
            text-align: center;
        }

        .table td {
            border: 1px solid #dee2e6;
            padding: 12px 8px;
            vertical-align: middle;
        }

        .table tbody tr:hover {
            background-color: #f5f5f5;
        }

        .table tbody tr:nth-of-type(odd) {
            background-color: rgba(0, 0, 0, 0.02);
        }

    .sortable {
        cursor: pointer;
    }

        .sortable:hover {
            background-color: #e9ecef;
        }

    .sort-icon {
        font-size: 14px;
        margin-left: 5px;
    }

    .pagination-container {
        margin-top: 20px;
    }

    .page-link {
        color: #333;
        border: 1px solid #dee2e6;
    }

    .page-item.active .page-link {
        background-color: #007bff;
        border-color: #007bff;
    }

    .page-item.disabled .page-link {
        color: #6c757d;
        pointer-events: none;
    }

    .badge.bg-success {
        background-color: #28a745 !important;
        color: white;
    }

    .badge.bg-view {
        background-color: #D951FF !important;
        color: white;
    }

    .badge.bg-primary {
        background-color: #007bff !important;
        color: white;
    }

    .badge.bg-danger {
        background-color: #dc3545 !important;
        color: white;
    }

    .input-group-text {
        background-color: #f8f9fa;
        border: 1px solid #ced4da;
    }

    .form-control:focus {
        border-color: #80bdff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }
</style>

<div class="page-header" style="margin-bottom: 20px">
    <h2 class="page-title" style="font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;">
        Nhật ký hoạt động
    </h2>
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a>Quản lý</a></li>
            <li class="breadcrumb-item active" aria-current="page">Nhật ký hoạt động</li>
        </ol>
    </nav>
</div>

<style>
    .logging-stats-container {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 1.5rem;
        margin: 1.5rem 0;
    }

    .stat-card {
        background: white;
        border-radius: 10px;
        padding: 1.5rem;
        position: relative;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        display: flex;
        align-items: flex-start;
        justify-content: space-between;
    }

        .stat-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

    .stat-info {
        flex-grow: 1;
    }

    .stat-icon {
        width: 48px;
        height: 48px;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-left: 1rem;
    }

        .stat-icon i {
            font-size: 1.75rem;
            color: white;
        }

    .total-activities .stat-icon {
        background: linear-gradient(45deg, #673ab7, #512da8);
    }

    .create-actions .stat-icon {
        background: linear-gradient(45deg, #4CAF50, #45a049);
    }

    .edit-actions .stat-icon {
        background: linear-gradient(45deg, #2196F3, #1976D2);
    }

    .delete-actions .stat-icon {
        background: linear-gradient(45deg, #f44336, #d32f2f);
    }

    .stat-label {
        color: #666;
        font-size: 0.9rem;
        margin-bottom: 0.5rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important;
        font-weight: bold;
    }

    .stat-value {
        color: #333;
        font-size: 1.75rem;
        font-weight: bold;
        margin-bottom: 0.25rem;
        font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important;
    }

    .stat-subtitle {
        color: #888;
        font-size: 0.85rem;
        display: flex;
        align-items: center;
        gap: 0.25rem;
    }
     
</style>

<div class="logging-stats-container">
    <!-- Tổng số hoạt động -->
    <div class="stat-card total-activities">
        <div class="stat-info">
            <div class="stat-label">TỔNG HOẠT ĐỘNG</div>
            <div class="stat-value">@(ViewBag.TotalActivities?.ToString("N0") ?? "0")</div>
            <div class="stat-subtitle">
                <i class="mdi mdi-history"></i>
                Tất cả hoạt động
            </div>
        </div>
        <div class="stat-icon">
            <i class="mdi mdi-chart-timeline-variant"></i>
        </div>
    </div>

    <!-- Hoạt động tạo mới -->
    <div class="stat-card create-actions">
        <div class="stat-info">
            <div class="stat-label">HOẠT ĐỘNG TẠO MỚI</div>
            <div class="stat-value">@(ViewBag.CreateActions?.ToString("N0") ?? "0")</div>
            <div class="stat-subtitle">
                <i class="mdi mdi-plus-circle"></i>
                Tạo mới tài nguyên
            </div>
        </div>
        <div class="stat-icon">
            <i class="mdi mdi-plus-box"></i>
        </div>
    </div>

    <!-- Hoạt động chỉnh sửa -->
    <div class="stat-card edit-actions">
        <div class="stat-info">
            <div class="stat-label">HOẠT ĐỘNG CHỈNH SỬA</div>
            <div class="stat-value">@(ViewBag.EditActions?.ToString("N0") ?? "0")</div>
            <div class="stat-subtitle">
                <i class="mdi mdi-pencil"></i>
                Cập nhật tài nguyên
            </div>
        </div>
        <div class="stat-icon">
            <i class="mdi mdi-pencil-box"></i>
        </div>
    </div>

    <!-- Hoạt động xóa -->
    <div class="stat-card delete-actions">
        <div class="stat-info">
            <div class="stat-label">HOẠT ĐỘNG XÓA</div>
            <div class="stat-value">@(ViewBag.DeleteActions?.ToString("N0") ?? "0")</div>
            <div class="stat-subtitle">
                <i class="mdi mdi-delete"></i>
                Xóa tài nguyên
            </div>
        </div>
        <div class="stat-icon">
            <i class="mdi mdi-delete-forever"></i>
        </div>
    </div>
</div>

<form class="d-flex flex-column" action="@Url.Action("LoggingView", "Admin")" method="get">
    <div class="d-flex align-items-center mb-3" style="width: 100%; gap: 10px;">
        <div class="input-group" style="flex: 1.45;">
            <div class="input-group-prepend bg-transparent">
                <i class="input-group-text border-0 mdi mdi-magnify"></i>
            </div>
            <input type="text"
                   class="form-control"
                   name="query"
                   placeholder="Tìm kiếm theo tên người dùng hoặc chi tiết hành động"
                   value="@Model?.Query" />
        </div>

        <div class="input-group" style="flex: 1;">
            <select name="actionType" class="form-control" style="height: 47px !important">
                <option value="">All Actions</option>
                @foreach (var action in new[] { "CREATE", "EDIT", "DELETE" })
                {
                    <option value="@(action)_ACCOUNT">@(action) Account</option>
                    <option value="@(action)_PRODUCT">@(action) Product</option>
                }
            </select>
        </div>
    </div>

    <div class="d-flex align-items-center mb-3" style="gap: 10px;">
        <div class="input-group" style="flex: 1;">
            <label class="input-group-text">Từ ngày</label>
            <input type="date" name="fromDate" class="form-control" value="@Model?.FromDate?.ToString("yyyy-MM-dd")" />
        </div>
        <div class="input-group" style="flex: 1;">
            <label class="input-group-text">Đến ngày</label>
            <input type="date" name="toDate" class="form-control" value="@Model?.ToDate?.ToString("yyyy-MM-dd")" />
        </div>
    </div>

    <div class="d-flex mb-3">
        <button type="submit" class="btn btn-gradient-success btn-fw" style="padding: 10px 0px 10px 0px !important; min-width: 150px !important; font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;">
            <i class="mdi mdi-magnify"></i> Tìm kiếm
        </button>
        <button type="button" id="clearButton" class="btn btn-gradient-danger btn-fw" style="padding: 10px 0px 10px 0px !important; min-width: 150px !important; margin-left: 10px; font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;">
            <i class="mdi mdi-delete"></i> Đặt lại
        </button>
    </div>
</form>

<div class="table-responsive">
    <table class="table">
        <thead >
            <tr >
                <th class="sortable" data-sort="id" style="font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;">ID <i class="sort-icon mdi mdi-sort"></i></th>
                <th class="sortable" data-sort="username" style="font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;" >Tên người dùng<i class="sort-icon mdi mdi-sort"></i></th>
                <th class="sortable" data-sort="actionType" style="font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;">Loại hoạt động <i class="sort-icon mdi mdi-sort"></i></th>
                <th style="font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;">Chi tiết hoạt động</th>
                <th class="sortable" data-sort="actionTime" style="font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;">Thời gian thực hiện<i class="sort-icon mdi mdi-sort"></i></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var activity in Model.Activities)
            {
                <tr>
                    <td style="text-align: center;">@activity.Activity_id</td>
                    <td style="text-align: center;">@activity.Username</td>
                    <td style="text-align: center;">
                        <span class="badge @GetActionTypeBadgeClass(activity.ActionType)">
                            @activity.ActionType
                        </span>
                    </td>
                    <td style="padding-left: 40px;">@activity.ActionDetails</td>
                    <td style="text-align: center;">@activity.ActionTime.ToString("yyyy-MM-dd HH:mm:ss")</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="pagination-container d-flex justify-content-between align-items-center">
    <div class="page-info">
        Showing <span id="startIndex">1</span> to <span id="endIndex">10</span> of <span id="totalItems">0</span> entries
    </div>
    <ul class="pagination">
        <li class="page-item" id="previousPage">
            <a class="page-link" href="#"><span>&laquo;</span></a>
        </li>
        <li class="page-item" id="nextPage">
            <a class="page-link" href="#"><span>&raquo;</span></a>
        </li>
    </ul>
</div>

@functions {
    public string GetActionTypeBadgeClass(string actionType)
    {
        return actionType switch
        {
            var type when type.Contains("CREATE") => "bg-success",
            var type when type.Contains("EDIT") => "bg-primary",
            var type when type.Contains("DELETE") => "bg-danger",
            var type when type.Contains("UPDATE") => "bg-info",
            var type when type.Contains("CANCEL") => "bg-warning",
            var type when type.Contains("VIEW") => "bg-view",

            _ => "bg-secondary"
        };
    }
}

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Functionality for clear button
        const clearButton = document.getElementById('clearButton');
        clearButton?.addEventListener('click', () => {
            document.querySelectorAll('form input, form select').forEach(input => {
                if (input.type === 'date') input.value = '';
                else if (input.tagName.toLowerCase() === 'select') input.selectedIndex = 0;
                else input.value = '';
            });
        });

         // -------------------- Pagination and Sorting --------------------
    const tableBody = document.querySelector('table tbody');
    if (tableBody) {
        const ITEMS_PER_PAGE = 10;
        let currentPage = 1;
        // Store original rows order
        const originalRows = Array.from(tableBody.querySelectorAll('tr'));
        // Create a copy for working with
        let workingRows = [...originalRows];
        const totalPages = Math.ceil(workingRows.length / ITEMS_PER_PAGE);

        document.getElementById('totalItems').textContent = workingRows.length;

        function showPage(pageNum) {
            const start = (pageNum - 1) * ITEMS_PER_PAGE;
            const end = start + ITEMS_PER_PAGE;

            // Hide all rows first
            workingRows.forEach(row => row.style.display = 'none');
            // Show only rows for current page
            workingRows.slice(start, end).forEach(row => row.style.display = '');

            currentPage = pageNum;
            updatePaginationControls();
        }

        function updatePaginationControls() {
            const previousBtn = document.getElementById('previousPage');
            const nextBtn = document.getElementById('nextPage');
            const totalPages = Math.ceil(workingRows.length / ITEMS_PER_PAGE);

            previousBtn.classList.toggle('disabled', currentPage === 1);
            nextBtn.classList.toggle('disabled', currentPage === totalPages);

            const startIndex = ((currentPage - 1) * ITEMS_PER_PAGE) + 1;
            const endIndex = Math.min(currentPage * ITEMS_PER_PAGE, workingRows.length);

            document.getElementById('startIndex').textContent = startIndex;
            document.getElementById('endIndex').textContent = endIndex;

            updatePageNumbers();
        }

        function updatePageNumbers() {
            const pagination = document.querySelector('.pagination');
            const previousBtn = document.getElementById('previousPage');
            const nextBtn = document.getElementById('nextPage');
            const totalPages = Math.ceil(workingRows.length / ITEMS_PER_PAGE);

            document.querySelectorAll('.page-number').forEach(num => num.remove());

            let startPage = Math.max(1, currentPage - 2);
            let endPage = Math.min(totalPages, currentPage + 2);

            if (currentPage <= 3) {
                endPage = Math.min(5, totalPages);
            } else if (currentPage >= totalPages - 2) {
                startPage = Math.max(1, totalPages - 4);
            }

            for (let i = startPage; i <= endPage; i++) {
                const pageItem = document.createElement('li');
                pageItem.className = `page-item page-number ${i === currentPage ? 'active' : ''}`;
                pageItem.innerHTML = `<a class="page-link" href="#">${i}</a>`;
                pagination.insertBefore(pageItem, nextBtn);

                pageItem.addEventListener('click', (e) => {
                    e.preventDefault();
                    showPage(i);
                });
            }
        }

        // Sorting functionality
        const headers = document.querySelectorAll('th.sortable');
        if (headers.length > 0) {
            let currentSort = { column: null, direction: 'asc' };

            headers.forEach(header => {
                header.addEventListener('click', () => {
                    const column = header.dataset.sort;

                    // Update sort indicators
                    headers.forEach(h => {
                        if (h !== header) h.classList.remove('asc', 'desc');
                    });

                    if (currentSort.column === column) {
                        currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
                        header.classList.toggle('asc', currentSort.direction === 'asc');
                        header.classList.toggle('desc', currentSort.direction === 'desc');
                    } else {
                        currentSort.column = column;
                        currentSort.direction = 'asc';
                        header.classList.remove('desc');
                        header.classList.add('asc');
                    }

                    // Sort the working rows array
                    workingRows.sort((a, b) => {
                        let aValue, bValue;

                        switch(column) {
                            case 'id':
                                aValue = parseInt(a.cells[0].textContent);
                                bValue = parseInt(b.cells[0].textContent);
                                break;
                            case 'username':
                                aValue = a.cells[1].textContent;
                                bValue = b.cells[1].textContent;
                                break;
                            case 'actionType':
                                aValue = a.cells[2].textContent.trim();
                                bValue = b.cells[2].textContent.trim();
                                break;
                            case 'actionTime':
                                aValue = new Date(a.cells[4].textContent);
                                bValue = new Date(b.cells[4].textContent);
                                break;
                            default: return 0;
                        }

                        if (aValue instanceof Date || typeof aValue === 'number') {
                            return currentSort.direction === 'asc' ? aValue - bValue : bValue - aValue;
                        }

                        return currentSort.direction === 'asc'
                            ? String(aValue).localeCompare(String(bValue))
                            : String(bValue).localeCompare(String(aValue));
                    });

                    // Clear and rebuild table body with sorted rows
                    while (tableBody.firstChild) {
                        tableBody.removeChild(tableBody.firstChild);
                    }
                    workingRows.forEach(row => tableBody.appendChild(row));

                    // Reset to first page and show
                    showPage(1);
                });
            });
        }

        // Navigation event listeners
        document.getElementById('previousPage')?.addEventListener('click', (e) => {
            e.preventDefault();
            if (currentPage > 1) showPage(currentPage - 1);
        });

        document.getElementById('nextPage')?.addEventListener('click', (e) => {
            e.preventDefault();
            if (currentPage < Math.ceil(workingRows.length / ITEMS_PER_PAGE)) showPage(currentPage + 1);
        });

        // Initialize first page
        showPage(1);
    }
    });
</script>