@model DemoApp_Test.Models.OrderSearchViewModel
@{
    ViewData["Title"] = "Order Management";
}
<style>
    .pagination-container {
        margin-top: 1rem;
        padding: 1rem;
        background-color: #fff;
        border-radius: 0.25rem;
        box-shadow: 0 1px 3px rgba(0,0,0,0.12);
    }

    .pagination {
        margin: 0;
    }

    .page-link {
        color: #333;
        border: 1px solid #dee2e6;
        padding: 0.5rem 0.75rem;
    }

        .page-link:hover {
            background-color: #e9ecef;
            border-color: #dee2e6;
            color: #333;
        }

    .page-item.active .page-link {
        background-color: #007bff;
        border-color: #007bff;
        color: white;
    }

    .page-item.disabled .page-link {
        color: #6c757d;
        pointer-events: none;
        background-color: #fff;
        border-color: #dee2e6;
    }

    .page-info {
        color: #6c757d;
        font-size: 0.875rem;
    }

    .table {
        width: 100%;
        margin-bottom: 1rem;
        background-color: transparent;
        border-collapse: collapse;
    }

        .table th,
        .table td {
            padding: 12px 8px;
            vertical-align: middle;
            border: 1px solid #dee2e6;
        }

        .table thead th {
            background-color: #f8f9fa;
            border-bottom: 2px solid #dee2e6;
            font-weight: 600;
            color: #333;
        }

        .table tbody tr:hover {
            background-color: rgba(0, 0, 0, 0.02);
        }

    .btn-icon {
        padding: 0.5rem;
        line-height: 1;
    }

        .btn-icon i {
            font-size: 1.25rem;
            line-height: 1;
        }

    .delete-order-btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .sortable {
        cursor: pointer;
    }

        .sortable:hover {
            background-color: #e9ecef !important;
        }

    .sort-asc::after {
        content: " ↑";
    }

    .sort-desc::after {
        content: " ↓";
    }
</style>


<div class="page-header">
    <h2 class="page-title" style="font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;">
        Đơn hàng đã hủy
    </h2>    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a>Quản lý</a></li>
            <li class="breadcrumb-item active">Quản lý đơn hàng</li>
        </ol>
    </nav>
</div>
<style>
    .order-stats-container {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 1.5rem;
        margin: 1.5rem 0;
    }

    .stat-card {
        background: white;
        border-radius: 10px;
        padding: 1.5rem;
        position: relative;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        display: flex;
        align-items: flex-start;
        justify-content: space-between;
    }

        .stat-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

    .stat-info {
        flex-grow: 1;
    }

    .stat-icon {
        width: 48px;
        height: 48px;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-left: 1rem;
    }

        .stat-icon i {
            font-size: 1.75rem;
            color: white;
        }

    .total-orders .stat-icon {
        background: linear-gradient(45deg, #2196F3, #1976D2);
    }

    .pending-orders .stat-icon {
        background: linear-gradient(45deg, #ff9800, #f57c00);
    }

    .completed-orders .stat-icon {
        background: linear-gradient(45deg, #4CAF50, #45a049);
    }

    .total-revenue .stat-icon {
        background: linear-gradient(45deg, #9c27b0, #7b1fa2);
    }

    .stat-label {
        color: #666;
        font-size: 0.9rem;
        margin-bottom: 0.5rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important;
        font-weight: bold;
    }

    .stat-value {
        color: #333;
        font-size: 1.75rem;
        font-weight: bold;
        margin-bottom: 0.25rem;
        font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important;
    }

    .stat-subtitle {
        color: #888;
        font-size: 0.85rem;
        display: flex;
        align-items: center;
        gap: 0.25rem;
    }
     
</style>

<div class="order-stats-container">
    <!-- Tổng đơn hàng -->
    <div class="stat-card total-orders">
        <div class="stat-info">
            <div class="stat-label">TỔNG ĐƠN HÀNG</div>
            <div class="stat-value">@(ViewBag.TotalOrders?.ToString("N0") ?? "0")</div>
            <div class="stat-subtitle">
                <i class="mdi mdi-shopping"></i>
                Tất cả đơn hàng
            </div>
        </div>
        <div class="stat-icon">
            <i class="mdi mdi-cart-outline"></i>
        </div>
    </div>

    <!-- Đơn hàng chờ xác nhận -->
    <div class="stat-card pending-orders">
        <div class="stat-info">
            <div class="stat-label">CHỜ XÁC NHẬN</div>
            <div class="stat-value">@(ViewBag.PendingOrders?.ToString("N0") ?? "0")</div>
            <div class="stat-subtitle">
                <i class="mdi mdi-clock-outline"></i>
                Đơn hàng mới
            </div>
        </div>
        <div class="stat-icon">
            <i class="mdi mdi-clock-alert"></i>
        </div>
    </div>

    <!-- Đơn hàng đã xác nhận -->
    <div class="stat-card completed-orders">
        <div class="stat-info">
            <div class="stat-label">ĐÃ XÁC NHẬN</div>
            <div class="stat-value">@(ViewBag.CompletedOrders?.ToString("N0") ?? "0")</div>
            <div class="stat-subtitle">
                <i class="mdi mdi-check-circle"></i>
                Đơn hàng đã duyệt
            </div>
        </div>
        <div class="stat-icon">
            <i class="mdi mdi-check-circle-outline"></i>
        </div>
    </div>

    <!-- Tổng doanh thu -->
    <div class="stat-card total-revenue">
        <div class="stat-info">
            <div class="stat-label">TỔNG DOANH THU</div>
            <div class="stat-value">₫@((ViewBag.TotalRevenue ?? 0).ToString("#,0"))</div>
            <div class="stat-subtitle">
                <i class="mdi mdi-currency-usd"></i>
                Doanh thu từ đơn hàng
            </div>
        </div>
        <div class="stat-icon">
            <i class="mdi mdi-cash-multiple"></i>
        </div>
    </div>
</div>
<form class="d-flex flex-column" action="@Url.Action("OrderCanceledView", "Admin")" method="get">
    @Html.AntiForgeryToken()


    <div class="d-flex align-items-center mb-3" style="width: 100%; gap: 10px;">
        <!-- Search -->
        <div class="input-group" style="flex: 1;">
            <div class="input-group-prepend bg-transparent">
                <i class="input-group-text border-0 mdi mdi-magnify"></i>
            </div>
            <input type="text"
                   class="form-control"
                   name="query"
                   placeholder="Tìm kiếm theo ID đơn hàng, tên khách hàng, địa chỉ, SĐT"
                   value="@Model?.Query" />
        </div>

        <!-- Status -->
        <div class="input-group" style="flex: 1; height: 47px !important;">
            <select class="form-control" name="status" asp-for="Status">
                <option value="">Trạng thái đơn hàng</option>
                <option value="true">Đã xác nhận</option>
                <option value="false">Chờ xác nhận</option>
            </select>
        </div>

        <!-- Payment Method -->
        <div class="input-group" style="flex: 1; height: 47px !important;">
            <select class="form-control" name="paymentMethod" asp-for="PaymentMethod">
                <option value="">Phương thức thanh toán </option>
                <option value="Cash">Tiền mặt </option>
                <option value="Credit Card">Thẻ tín dụng</option>
                <option value="Bank Transfer">Chuyển khoản ngân hàng</option>
            </select>
        </div>

        <!-- Payment Status -->
        <div class="input-group" style="flex: 1; height: 47px !important;">
            <select class="form-control" name="paymentStatus" asp-for="PaymentStatus">
                <option value="">Trạng thái thanh toán</option>
                <option value="true">Hoàn thành</option>
                <option value="false">Đang vận chuyển</option>
            </select>
        </div>
    </div>

    <div class="d-flex align-items-center mb-3" style="width: 100%; gap: 10px;">
        <!-- Date Range -->
        <div class="input-group" style="flex: 1;">
            <input type="date"
                   class="form-control"
                   name="fromDate"
                   value="@(Model?.FromDate?.ToString("yyyy-MM-dd"))" />
        </div>
        <div class="input-group" style="flex: 1;">
            <input type="date"
                   class="form-control"
                   name="toDate"
                   value="@(Model?.ToDate?.ToString("yyyy-MM-dd"))" />
        </div>

        <!-- Min Total -->
        <div class="input-group" style="flex: 1;">
            <input type="number"
                   class="form-control"
                   name="minTotal"
                   placeholder="Giá tối thiểu"
                   value="@Model?.MinTotal"
                   min="0" max="10000000"
                   oninput="validateNumberInput(this)" />
        </div>

        <!-- Max Total -->
        <div class="input-group" style="flex: 1;">
            <input type="number"
                   class="form-control"
                   name="maxTotal"
                   placeholder="Giá tối đa"
                   value="@Model?.MaxTotal"
                   min="0" max="10000000"
                   oninput="validateNumberInput(this)" />
        </div>
    </div>




    <div class="d-flex justify-content-between align-items-center mb-3">
        <div>
            <button type="submit" class="btn btn-gradient-success btn-fw" style="padding: 10px 0px 10px 0px !important; min-width: 150px !important; font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;">
                <i class="mdi mdi-magnify"></i> Tìm kiếm
            </button>
            <button type="button" id="clearButton" class="btn btn-gradient-danger btn-fw" style="padding: 10px 0px 10px 0px !important; min-width: 150px !important; margin-left: 10px; font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;">
                <i class="mdi mdi-delete"></i> Đặt lại
            </button>
        </div>
        <div>
            <button type="button" id="exportButton" class="btn btn-gradient-success" style="padding: 10px 0px 10px 0px !important; min-width: 120px !important">
                <i class="mdi mdi-file-excel"></i> Export
            </button>
        </div>
    </div>
</form>


<div class="table-responsive">
    <table class="table">
        <thead>
            <tr>
                <th style="text-align: center; font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold; " class="sortable" data-sort="orderId">ID Đơn hàng </th>
                <th style="text-align: center; font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;" class="sortable" data-sort="customer">Tên khách hàng </th>
                <th style="text-align: center; font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;" class="sortable" data-sort="date">Ngày đặt </th>
                <th style="text-align: center; font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;" class="sortable" data-sort="total">Tổng tiền </th>
                <th style="text-align: center; font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;" class="sortable" data-sort="status"> Trạng thái đơn hàng </th>
                <th style="text-align: center; font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;" class="sortable" data-sort="paymentMethod">Phương thức thanh toán </th>
                <th style="text-align: center; font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;" class="sortable" data-sort="paymentStatus">Trạng thái</th>
                <th style="text-align: center; font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;">Phương thức</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in Model.Orders)
            {
                <tr>
                    <td style="text-align: center; padding: 12px 8px; border: 1px solid #dee2e6;">@order.Bill_id</td>
                    <td style="padding: 12px 8px; border: 1px solid #dee2e6; text-align: center !important;">@(order.Client?.Name ?? "N/A")</td>
                    <td style="text-align: center; padding: 12px 8px; border: 1px solid #dee2e6;">@order.Date.ToString("yyyy-MM-dd HH:mm")</td>
                    <td style="text-align: left; padding: 12px 0px 8px 30px; border: 1px solid #dee2e6;">₫@order.Total.ToString("#,0").Replace(",", ".")</td>
                    <td style="text-align: center; padding: 12px 8px; border: 1px solid #dee2e6;">
                        <button class="btn btn-sm status-toggle @(order.Status ? "btn-success" : "btn-warning")"
                                data-order-id="@order.Bill_id"
                                data-current-status="@order.Status.ToString().ToLower()">
                            @(order.Status ? "Đã xác nhận" : "Chờ xác nhận")
                        </button>
                    </td>
                    <td style="text-align: center; padding: 12px 8px; border: 1px solid #dee2e6;">@(order.PaymentMethod ?? "N/A")</td>
                    <td style="text-align: center; padding: 12px 8px; border: 1px solid #dee2e6;">
                        <button class="btn btn-sm payment-toggle @(order.PaymentStatus == true ? "btn-success" : "btn-danger")"
                                data-order-id="@order.Bill_id"
                                data-current-payment="@(order.PaymentStatus == true ? "true" : "false")"
                        @(!order.Status ? "disabled" : "")
                                style="opacity: @(!order.Status ? "0.6" : "1")">
                            @(order.PaymentStatus == true ? "Hoàn thành" : "Đang vận chuyển")
                        </button>
                    </td>
                    <td style="text-align: center; padding: 12px 8px; border: 1px solid #dee2e6;">
                        <div class="d-flex justify-content-center gap-2">
                            <button type="button"
                                    class="btn btn-icon btn-outline-info view-order-btn"
                                    data-order-id="@order.Bill_id"
                                    title="View Details">
                                <i class="mdi mdi-eye"></i>
                            </button>
                            <button type="button"
                                    class="btn btn-icon btn-outline-success restore-order-btn"
                                    data-order-id="@order.Bill_id"
                                    title="Restore Order">
                                <i class="mdi mdi-restore"></i>
                            </button>
                            <button type="button"
                                    class="btn btn-icon btn-outline-danger delete-order-btn"
                                    data-order-id="@order.Bill_id"
                                    title="Delete Order">
                                <i class="mdi mdi-delete"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="pagination-container mt-4 d-flex justify-content-between align-items-center">
    <div class="page-info">
        Showing <span id="startIndex">1</span> to <span id="endIndex">10</span> of <span id="totalItems">0</span> entries
    </div>
    <ul class="pagination">
        <li class="page-item" id="previousPage">
            <a class="page-link" href="#" aria-label="Previous">
                <span aria-hidden="true">&laquo;</span>
            </a>
        </li>
        <li class="page-item" id="nextPage">
            <a class="page-link" href="#" aria-label="Next">
                <span aria-hidden="true">&raquo;</span>
            </a>
        </li>
    </ul>
</div>

<!-- Add this Delete Confirmation Modal -->
<div class="modal fade" id="deleteOrderModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">Xác nhận hủy</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-center py-4">
                <i class="mdi mdi-alert-circle text-danger" style="font-size: 48px;"></i>
                <h4 class="mt-3">Are you sure?</h4>
                <p class="text-muted">Do you really want to cancel this order?</p>
                <p class="font-weight-bold" id="deleteOrderId"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteOrder">Accept</button>
            </div>
        </div>
    </div>
</div>

<!-- Order Details Modal -->
<div class="modal fade" id="orderDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" style="font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;">Chi tiết đơn hàng</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="orderDetails"></div>
            </div>
        </div>
    </div>
</div>
<!-- Edit Order Modal -->
<div class="modal fade" id="editOrderModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Order</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editOrderForm">
                    <input type="hidden" id="editOrderId" name="orderId" />
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Customer Name</label>
                            <input type="text" class="form-control" id="editCustomerName" name="customerName" maxlength="50" required>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Contact</label>
                            <input type="text" class="form-control" id="editCustomerContact" name="customerContact" maxlength="10" pattern="[0-9]+" required>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Address</label>
                        <input type="text" class="form-control" id="editCustomerAddress" name="customerAddress" maxlength="50" required>
                    </div>
                    <div class="order-items-container">
                        <h6>Order Items</h6>
                        <div id="editOrderItems"></div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveOrderChanges">Save Changes</button>
            </div>
        </div>
    </div>
</div>

<script>
    // Add validation for contact number
    document.getElementById('editCustomerContact').addEventListener('input', function(e) {
        this.value = this.value.replace(/[^0-9]/g, '');
        if (this.value.length > 10) {
            this.value = this.value.slice(0, 10);
        }
    });
</script>


@section Scripts {
    <script>
                document.addEventListener('DOMContentLoaded', function() {
            // Delete Order
            document.querySelectorAll('.delete-order-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const orderId = this.getAttribute('data-order-id');
                    Swal.fire({
                        title: 'Xác nhận xóa',
                        text: 'Bạn có chắc muốn xóa hoàn toàn đơn hàng này không?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Xóa',
                        cancelButtonText: 'Hủy',
                        confirmButtonColor: '#dc3545'
                    }).then(async (result) => {
                        if (result.isConfirmed) {
                            try {
                                const response = await fetch('/Admin/Admin/DeleteOrder', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                                    },
                                    body: JSON.stringify({ orderId: orderId })
                                });

                                const result = await response.json();
                                if (result.success) {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Deleted',
                                        text: 'Order has been deleted',
                                        showConfirmButton: false,
                                        timer: 1500
                                    }).then(() => window.location.reload());
                                } else {
                                    throw new Error(result.message);
                                }
                            } catch (error) {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: error.message || 'Failed to delete order'
                                });
                            }
                        }
                    });
                });
            });

            // Restore Order
            document.querySelectorAll('.restore-order-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const orderId = this.getAttribute('data-order-id');
                    Swal.fire({
                        title: 'Xác nhận khôi phục',
                        text: 'Bạn có xác định là muốn khôi phục đơn hàng không?',
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonText: 'Khôi phục',
                        cancelButtonText: 'Hủy',
                        confirmButtonColor: '#28a745'
                    }).then(async (result) => {
                        if (result.isConfirmed) {
                            try {
                                const response = await fetch('/Admin/Admin/RestoreOrder', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                                    },
                                    body: JSON.stringify({ orderId: orderId })
                                });

                                const result = await response.json();
                                if (result.success) {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Đã khôi phục',
                                        text: 'Đơn hàng đã được khôi phục',
                                        showConfirmButton: false,
                                        timer: 1500
                                    }).then(() => window.location.reload());
                                } else {
                                    throw new Error(result.message);
                                }
                            } catch (error) {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: error.message || 'Failed to restore order'
                                });
                            }
                        }
                    });
                });
            });
        });
    </script>


    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const tableBody = document.querySelector('table tbody');
            const ITEMS_PER_PAGE = 10;
            let currentPage = 1;
            const allRows = Array.from(tableBody.querySelectorAll('tr'));
            const totalPages = Math.ceil(allRows.length / ITEMS_PER_PAGE);

            // Update total items count
            document.getElementById('totalItems').textContent = allRows.length;

            function updatePaginationControls() {
                const previousBtn = document.getElementById('previousPage');
                const nextBtn = document.getElementById('nextPage');

                // Update disabled state of prev/next buttons
                previousBtn.classList.toggle('disabled', currentPage === 1);
                nextBtn.classList.toggle('disabled', currentPage === totalPages);

                // Update showing X to Y of Z text
                const startIndex = ((currentPage - 1) * ITEMS_PER_PAGE) + 1;
                const endIndex = Math.min(currentPage * ITEMS_PER_PAGE, allRows.length);
                document.getElementById('startIndex').textContent = startIndex;
                document.getElementById('endIndex').textContent = endIndex;

                updatePageNumbers();
            }

            function updatePageNumbers() {
                const pagination = document.querySelector('.pagination');
                const previousBtn = document.getElementById('previousPage');
                const nextBtn = document.getElementById('nextPage');

                // Remove existing page numbers
                document.querySelectorAll('.page-number').forEach(num => num.remove());

                // Calculate page range
                let startPage = Math.max(1, currentPage - 2);
                let endPage = Math.min(totalPages, currentPage + 2);

                // Adjust range for edge cases
                if (currentPage <= 3) {
                    endPage = Math.min(5, totalPages);
                } else if (currentPage >= totalPages - 2) {
                    startPage = Math.max(1, totalPages - 4);
                }

                // Add page numbers
                for (let i = startPage; i <= endPage; i++) {
                    const pageItem = document.createElement('li');
                    pageItem.className = `page-item page-number ${i === currentPage ? 'active' : ''}`;
                    pageItem.innerHTML = `<a class="page-link" href="#">${i}</a>`;
                    pagination.insertBefore(pageItem, nextBtn);

                    pageItem.addEventListener('click', (e) => {
                        e.preventDefault();
                        showPage(i);
                    });
                }
            }

            function showPage(pageNum) {
                const start = (pageNum - 1) * ITEMS_PER_PAGE;
                const end = start + ITEMS_PER_PAGE;

                // Hide all rows
                allRows.forEach(row => row.style.display = 'none');

                // Show only rows for current page
                allRows.slice(start, end).forEach(row => row.style.display = '');

                currentPage = pageNum;
                updatePaginationControls();
            }

            // Add event listeners for previous/next buttons
            document.getElementById('previousPage').addEventListener('click', (e) => {
                e.preventDefault();
                if (currentPage > 1) showPage(currentPage - 1);
            });

            document.getElementById('nextPage').addEventListener('click', (e) => {
                e.preventDefault();
                if (currentPage < totalPages) showPage(currentPage + 1);
            });

            // Initialize first page
            showPage(1);
        });
    </script>


    <script>
        document.addEventListener('DOMContentLoaded', function() {
            let currentSort = {
                column: null,
                direction: 'asc'
            };

            function sortTable(column) {
                const table = document.querySelector('table');
                const tbody = table.querySelector('tbody');
                const rows = Array.from(tbody.querySelectorAll('tr'));

                // Remove existing sort indicators
                document.querySelectorAll('th').forEach(th => {
                    th.classList.remove('sort-asc', 'sort-desc');
                });

                // Update sort direction
                if (currentSort.column === column) {
                    currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
                } else {
                    currentSort.column = column;
                    currentSort.direction = 'asc';
                }

                // Add sort indicator to current column
                const th = document.querySelector(`th[data-sort="${column}"]`);
                th.classList.add(`sort-${currentSort.direction}`);

                // Sort rows
                rows.sort((a, b) => {
                    let aValue, bValue;

                    switch(column) {
                        case 'orderId':
                            aValue = a.cells[0].textContent;
                            bValue = b.cells[0].textContent;
                            break;
                        case 'customer':
                            aValue = a.cells[1].textContent;
                            bValue = b.cells[1].textContent;
                            break;
                        case 'date':
                            aValue = new Date(a.cells[2].textContent);
                            bValue = new Date(b.cells[2].textContent);
                            break;
                        case 'total':
                            aValue = parseFloat(a.cells[3].textContent.replace('$', ''));
                            bValue = parseFloat(b.cells[3].textContent.replace('$', ''));
                            break;
                        case 'status':
                            aValue = a.cells[4].querySelector('button').textContent;
                            bValue = b.cells[4].querySelector('button').textContent;
                            break;
                        case 'paymentMethod':
                            aValue = a.cells[5].textContent;
                            bValue = b.cells[5].textContent;
                            break;
                        case 'paymentStatus':
                            aValue = a.cells[6].querySelector('button').textContent;
                            bValue = b.cells[6].querySelector('button').textContent;
                            break;
                    }

                    if (aValue === bValue) return 0;

                    let comparison = aValue > bValue ? 1 : -1;
                    return currentSort.direction === 'asc' ? comparison : -comparison;
                });

                // Reorder table
                rows.forEach(row => tbody.appendChild(row));
            }

            // Add click handlers to sortable columns
            document.querySelectorAll('.sortable').forEach(th => {
                th.addEventListener('click', () => {
                    sortTable(th.dataset.sort);
                });
            });
        });</script>


    <script>

                document.addEventListener('DOMContentLoaded', function() {
            const editModal = new bootstrap.Modal(document.getElementById('editOrderModal'));

            // Handle edit button click
            document.querySelectorAll('.edit-order-btn').forEach(button => {
                button.addEventListener('click', async function() {
                    const orderId = this.getAttribute('data-order-id');
                    await loadOrderDetails(orderId, editModal);
                });
            });

            // Handle save changes
            document.getElementById('saveOrderChanges').addEventListener('click', async function() {
                await saveOrderChanges(editModal);
            });
        });

        async function loadOrderDetails(orderId, modal) {
            try {
                const response = await fetch(`/Admin/Admin/GetOrderDetails/${orderId}`);
                const result = await response.json();

                if (result.success) {
                    populateEditForm(result.data);
                    modal.show();
                } else {
                    throw new Error(result.message);
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Error loading order details'
                });
            }
        }

        function populateEditForm(order) {
            document.getElementById('editOrderId').value = order.orderId;
            document.getElementById('editCustomerName').value = order.customerName;
            document.getElementById('editCustomerContact').value = order.customerContact;
            document.getElementById('editCustomerAddress').value = order.customerAddress;

            const itemsHtml = generateOrderItemsTable(order.items);
            document.getElementById('editOrderItems').innerHTML = itemsHtml;
            // Add remove item handlers
            document.querySelectorAll('.remove-item').forEach(button => {
                button.addEventListener('click', function() {
                    this.closest('tr').remove();
                    updateTotalAmount();
                });
            });

            // Add quantity change handlers
            document.querySelectorAll('.item-quantity').forEach(input => {
                input.addEventListener('change', updateTotalAmount);
            });
        }

        function generateOrderItemsTable(items) {
            let html = `
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th>Quantity</th>
                            <th>Ice</th>
                            <th>Sugar</th>
                            <th>Size</th>
                            <th>Price</th>
                            <th>Total</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>`;

            items.forEach((item, index) => {
                html += generateOrderItemRow(item, index);
            });

            html += `</tbody>
                <tfoot>
                    <tr>
                        <td colspan="6" class="text-end"><strong>Grand Total:</strong></td>
                        <td colspan="2" id="grandTotal">$</td>
                    </tr>
                </tfoot>
            </table>`;

            return html;
        }

        function generateOrderItemRow(item, index) {
            return `
                <tr>
                    <td>
                        <input type="text" class="form-control" name="items[${index}].productName"
                            value="${item.productName}" readonly>
                    </td>
                    <td>
                        <input type="number" class="form-control item-quantity" name="items[${index}].quantity"
                            value="${item.quantity}" min="1" max="200"
                            oninput="this.value = Math.min(Math.max(this.value, 1), 200)">
                    </td>
                    <td>
                        <select class="form-control" name="items[${index}].ice">
                            ${generateOptions(['100%', '70%', '50%', '30%'], item.ice)}
                        </select>
                    </td>
                    <td>
                        <select class="form-control" name="items[${index}].sugar">
                            ${generateOptions(['100%', '70%', '50%', '30%'], item.sugar)}
                        </select>
                    </td>
                    <td>
                        <select class="form-control" name="items[${index}].size">
                            ${generateOptions(['S', 'M', 'L'], item.size)}
                        </select>
                    </td>
                    <td>
                        <input type="number" class="form-control item-price" name="items[${index}].price"
                            value="${item.price}" readonly>
                    </td>
                    <td class="item-total">$${(item.price * item.quantity).toFixed(2)}</td>
                    <td>
                        <button type="button" class="btn btn-sm btn-danger remove-item">Remove</button>
                    </td>
                </tr>`;
        }

        function generateOptions(options, selectedValue) {
            return options.map(option =>
                `<option value="${option}" ${option === selectedValue ? 'selected' : ''}>${option}</option>`
            ).join('');
        }

        function updateTotalAmount() {
            let total = 0;
            document.querySelectorAll('#editOrderItems tbody tr').forEach(row => {
                const quantity = parseInt(row.querySelector('.item-quantity').value) || 0;
                const price = parseFloat(row.querySelector('.item-price').value) || 0;
                const itemTotal = quantity * price;
                row.querySelector('.item-total').textContent = `$${itemTotal.toFixed(2)}`;
                total += itemTotal;
            });
            document.getElementById('grandTotal').textContent = `$${total.toFixed(2)}`;
        }

        async function saveOrderChanges(modal) {
            try {
                const form = document.getElementById('editOrderForm');
                const formData = collectFormData(form);

                const response = await fetch('/Admin/Admin/UpdateOrder', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(formData)
                });

                const result = await response.json();

                if (result.success) {
                    modal.hide();
                    document.getElementById('editOrderForm').reset();

                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Order updated successfully',
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    throw new Error(result.message);
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Error updating order'
                });
            }
        }

        function collectFormData(form) {
            const formData = new FormData(form);

            return {
                orderId: formData.get('orderId'),
                customerName: formData.get('customerName'),
                customerContact: formData.get('customerContact'),
                customerAddress: formData.get('customerAddress'),
                items: Array.from(document.querySelectorAll('#editOrderItems tbody tr')).map((row, index) => ({
                    productName: formData.get(`items[${index}].productName`),
                    quantity: parseInt(formData.get(`items[${index}].quantity`)),
                    ice: formData.get(`items[${index}].ice`),
                    sugar: formData.get(`items[${index}].sugar`),
                    size: formData.get(`items[${index}].size`),
                    price: parseFloat(formData.get(`items[${index}].price`))
                }))
            };
        }
    </script>
    

    <script>
        // Hàm kiểm tra và chỉ cho phép nhập số
        function validateNumberInput(input) {
            // Chỉ cho phép các ký tự số và xóa các ký tự không phải số
            input.value = input.value.replace(/[^0-9]/g, '');
        }
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Order Status Toggle
                       document.querySelectorAll('.status-toggle').forEach(button => {
            button.addEventListener('click', async function() {
                const orderId = this.dataset.orderId;
                const currentStatus = this.dataset.currentStatus === 'true';
                const paymentButton = document.querySelector(`.payment-toggle[data-order-id="${orderId}"]`);

                try {
                    const response = await fetch('/Admin/Admin/UpdateOrderStatus', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('[name=__RequestVerificationToken]').value
                        },
                        body: JSON.stringify({
                            orderId: orderId,
                            status: !currentStatus
                        })
                    });

                    const result = await response.json();
                    if (result.success) {
                        this.dataset.currentStatus = (!currentStatus).toString();
                        this.textContent = !currentStatus ? 'Đã xác nhận' : 'Chờ xác nhận';
                        this.classList.toggle('btn-warning');
                        this.classList.toggle('btn-success');

                        // If changing to Pending, update payment status to Unpaid
                        if (currentStatus) { // Changing from Completed to Pending
                            paymentButton.dataset.currentPayment = 'false';
                            paymentButton.textContent = 'Đang vận chuyển';
                            paymentButton.classList.remove('btn-success');
                            paymentButton.classList.add('btn-danger');
                            paymentButton.disabled = true;

                            // Update payment status in database
                            await fetch('/Admin/Admin/UpdatePaymentStatus', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'RequestVerificationToken': document.querySelector('[name=__RequestVerificationToken]').value
                                },
                                body: JSON.stringify({
                                    orderId: orderId,
                                    paymentStatus: false
                                })
                            });
                        } else {
                            paymentButton.disabled = false;
                        }

                        Swal.fire({
                            icon: 'success',
                            title: 'Status Updated',
                            text: `Order status has been changed to ${!currentStatus ? 'Đã xác nhận' : 'Chờ xác nhận'}`,
                            showConfirmButton: false,
                            timer: 1500
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: result.message || 'Error updating status'
                        });
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Error updating status'
                    });
                }
            });
        });



            // Payment Status Toggle
                    document.querySelectorAll('.payment-toggle').forEach(button => {
            button.addEventListener('click', async function() {
                if (this.disabled) return;

                const orderId = this.dataset.orderId;
                const currentPayment = this.dataset.currentPayment === 'true';

                try {
                    const response = await fetch('/Admin/Admin/UpdatePaymentStatus', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('[name=__RequestVerificationToken]').value
                        },
                        body: JSON.stringify({
                            orderId: orderId,
                            paymentStatus: !currentPayment
                        })
                    });

                    const result = await response.json();
                    if (result.success) {
                        // Update button appearance
                        this.dataset.currentPayment = (!currentPayment).toString();
                        this.textContent = !currentPayment ? 'Hoàn thành' : 'Đang vận chuyển';
                        this.classList.toggle('btn-danger');
                        this.classList.toggle('btn-success');

                        // Show success modal
                        Swal.fire({
                            icon: 'success',
                            title: 'Payment Status Updated',
                            text: `Payment status has been changed to ${!currentPayment ? 'Hoàn thành' : 'Đang vận chuyển'}`,
                            showConfirmButton: false,
                            timer: 1500
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: result.message || 'Error updating payment status'
                        });
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Error updating payment status'
                    });
                }
            });
        });
        });
    </script>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


    <script>
        function formatCurrency(amount) {
            return '₫' + new Intl.NumberFormat('vi-VN', {
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
            }).format(amount);
        }

        // Hàm để escape HTML nhằm bảo mật
        function escapeHtml(text) {
            const map = {
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                "'": '&#039;'
            };
            return String(text).replace(/[&<>"']/g, function(m) { return map[m]; });
        }
        document.addEventListener('DOMContentLoaded', function() {
            // Clear button
            document.getElementById('clearButton').addEventListener('click', function() {
                document.querySelectorAll('form input, form select').forEach(input => {
                    input.value = '';
                });
            });

            //Export button
            document.getElementById('exportButton').addEventListener('click', function() {
                const fromDate = document.querySelector('input[name="fromDate"]').value;
                const toDate = document.querySelector('input[name="toDate"]').value;
                window.location.href = `/Admin/Admin/ExportOrders?fromDate=${fromDate}&toDate=${toDate}`;
            });

            // View order details
            document.querySelectorAll('.view-order-btn').forEach(button => {
                button.addEventListener('click', async function() {
                    const orderId = this.getAttribute('data-order-id');
                    try {
                        const response = await fetch(`/Admin/Admin/GetOrderDetails/${orderId}`);
                        const result = await response.json();

                        if (result.success) {
                            const order = result.data;
        let detailsHtml = `
        <div class="card">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">Hóa đơn #${order.orderId}</h5>
            </div>
            <div class="card-body">
                <div class="row mb-4">
                    <div class="col-md-6">
                        <h6 class="text-primary">Thông tin đơn hàng</h6>
                        <table class="table table-borderless">
                            <tr>
                                <td><strong>Ngày đặt:</strong></td>
                                <td>${order.orderDate}</td>
                            </tr>
                            <tr>
                                <td><strong>Trạng thái đơn hàng:</strong></td>
                                <td><span class="badge ${order.status ? 'bg-success' : 'bg-warning'}">${order.status ? 'Đã xác nhận' : 'Chờ xác nhận'}</span></td>
                            </tr>
                            <tr>
                                <td><strong>Phương thức thanh toán:</strong></td>
                                <td>${order.paymentMethod || 'N/A'}</td>
                            </tr>
                            <tr>
                                <td><strong>Trạng thái thanh toán:</strong></td>
                                <td><span class="badge ${order.paymentStatus ? 'bg-success' : 'bg-danger'}">${order.paymentStatus ? 'Hoàn thành' : 'Đang vận chuyển'}</span></td>
                            </tr>
                        </table>
                    </div>
                    <div class="col-md-6">
                        <h6 class="text-primary">Thông tin khách hàng</h6>
                        <table class="table table-borderless">
                            <tr>
                                <td><strong>Tên khách hàng:</strong></td>
                                <td>${order.customerName}</td>
                            </tr>
                            <tr>
                                <td><strong>Liên hệ:</strong></td>
                                <td>${order.customerContact}</td>
                            </tr>
                            <tr>
                                <td><strong>Địa chỉ:</strong></td>
                                <td>${order.customerAddress}</td>
                            </tr>
                        </table>
                    </div>
                </div>

                <h6 class="text-primary">Các mục đơn hàng</h6>
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead class="bg-light">
                            <tr>
                                <th style = "font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;" >Sản phẩm</th>
                                <th style = "font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;" >Số lượng</th>
                                <th style = "font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;" >Giá </th>
                                <th style = "font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;" >Mức đá</th>
                                <th style = "font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;" >Mức đường</th>
                                <th style = "font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;" >Kích thước</th>
                                <th style = "font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;"  class="text-end">Tổng tiền</th>
                            </tr>
                        </thead>
                        <tbody>`;

        order.items.forEach(item => {
             detailsHtml += `
                <tr>
                    <td><strong>${item.productName}</strong></td>
                    <td>${item.quantity}</td>
                    <td>${formatCurrency(item.priceAfterDiscount.toFixed(2))}</td>
                    <td>${item.ice}</td>
                    <td>${item.sugar}</td>
                    <td>${item.size}</td>
                    <td class="text-end">${formatCurrency(item.total.toFixed(2))}</td>
                </tr>`;
        });

        detailsHtml += `
                        </tbody>
                        <tfoot>
                            <tr>
                                <td colspan="6" class="text-end"><strong>Subtotal:</strong></td>
                                <td class="text-end">${formatCurrency(order.total.toFixed(2))}</td>
                            </tr>
                            <tr>
                                <td colspan="6" class="text-end"><strong>Total:</strong></td>
                                <td class="text-end"><strong>${formatCurrency(order.total.toFixed(2))}</strong></td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>`;

        document.getElementById('orderDetails').innerHTML = detailsHtml;
                            new bootstrap.Modal(document.getElementById('orderDetailsModal')).show();
                        } else {
                            alert('Error loading order details');
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        alert('Error loading order details');
                    }
                });
            });

            // Process order
            document.querySelectorAll('.process-order-btn').forEach(button => {
                button.addEventListener('click', async function() {
                    if (!confirm('Are you sure you want to process this order?')) {
                        return;
                    }

                    const orderId = this.getAttribute('data-order-id');
                    try {
                        const response = await fetch('/Admin/Admin/ProcessOrder', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            },
                            body: JSON.stringify({ orderId: orderId })
                        });

                        const result = await response.json();
                        if (result.success) {
                            alert('Order processed successfully');
                            window.location.reload();
                        } else {
                            alert(result.message || 'Error processing order');
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        alert('Error processing order');
                    }
                });
            });
        });
    </script>

    <style>
        .table th {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
        }

        .table td {
            vertical-align: middle;
        }

        .badge {
            font-size: 0.875rem;
            padding: 0.5em 0.75em;
        }

        .btn-icon {
            padding: 0.5rem;
            margin: 0 0.25rem;
        }

        .order-info p {
            margin-bottom: 0.5rem;
        }
    </style>
}