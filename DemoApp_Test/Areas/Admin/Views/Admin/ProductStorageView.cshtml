@using Azure.Core
@model DemoApp_Test.Models.ProductSearchViewModel
@{
    ViewData["Title"] = "ProductStorageView";
    Layout = "../Shared/_Layout.cshtml";
}
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<style>
    .required {
        color: red;
    }
    /* Style cho toàn bộ bảng */
    .table {
        border: 1px solid #dee2e6;
        background-color: #ffffff;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        margin-bottom: 1rem;
    }

        /* Style cho header của bảng */
        .table thead th {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-bottom: 2px solid #dee2e6;
            padding: 12px 8px;
            font-weight: 600;
            color: #333;
            vertical-align: middle;
            text-align: center;
        }

        /* Style cho cells trong bảng */
        .table td {
            border: 1px solid #dee2e6;
            padding: 12px 8px;
            vertical-align: middle;
        }

        /* Style cho rows khi hover */
        .table tbody tr:hover {
            background-color: #f5f5f5;
        }

        /* Style cho checkbox column */
        .table th:first-child,
        .table td:first-child {
            border-left: 1px solid #dee2e6;
            text-align: center;
            width: 40px;
        }

        /* Style cho operation column */
        .table th:last-child,
        .table td:last-child {
            border-right: 1px solid #dee2e6;
        }

        /* Style cho alternate rows */
        .table tbody tr:nth-of-type(odd) {
            background-color: rgba(0, 0, 0, 0.02);
        }

        /* Style cho images trong bảng */
        .table td img {
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 2px;
        }

        /* Style cho text alignment trong các cột cụ thể */
        .table td:nth-child(4) { /* Product Name */
            text-align: left;
        }

        .table td:nth-child(5), /* Price */
        .table td:nth-child(6), /* Rating */
        .table td:nth-child(7), /* Review Count */
</style>


<style>
    /* Style phân trang */
    .pagination-container {
        padding: 0.5rem; /* Giảm padding của container */
        background-color: #fff;
        border: 1px solid #dee2e6;
        border-top: none;
    }

    .page-link {
        padding: 0.5rem 1rem; /* Giảm padding của nút */
        color: #6c757d;
        background-color: #fff;
        border: 1px solid #dee2e6;
        line-height: 1; /* Giảm line height */
        font-size: 18px; /* Giảm font size */
    }

    .pagination {
        margin: 0;
    }

        .pagination .page-item {
            display: flex;
            align-items: center;
            height: 50px; /* Đặt chiều cao cố định cho các nút */
        }

    .page-info {
        color: #6c757d;
        font-size: 18px; /* Giảm font size của text thông tin */
    }
</style>



<style>
    input::placeholder {
        color: #A2A1A1 !important;
    }

    select.form-control {
        color: #A2A1A1 !important; /* Màu văn bản của các tùy chọn */
    }

        select.form-control option {
            color: #000000; /* Màu của các tùy chọn */
        }
</style>

<style>
    .tooltip-container {
        position: relative;
        display: inline-block;
    }

        .tooltip-container .tooltip-text {
            visibility: hidden;
            width: 120px;
            background-color: black;
            color: #fff;
            text-align: center;
            padding: 5px;
            border-radius: 5px;
            position: absolute;
            bottom: 125%; /* Vị trí của tooltip */
            left: 50%;
            transform: translateX(-50%);
            z-index: 1;
            opacity: 0;
            transition: opacity 0.3s;
        }

        .tooltip-container:hover .tooltip-text {
            visibility: visible;
            opacity: 1;
        }
</style>

<div class="page-header" style="margin-bottom: 20px">
    <h2 class="page-title" style="font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;">
        Sản phẩm lưu trữ
    </h2>
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a>Quản lý</a></li>
            <li class="breadcrumb-item active" aria-current="page">Quản lý Sản phẩm</li>
        </ol>
    </nav>
</div>
<form class="d-flex flex-column" action="@Url.Action("ProductStorageView", "Admin")" method="get">
    <div class="d-flex align-items-center mb-3" style="width: 100%; gap: 10px;">
        <!-- Tìm kiếm -->
        <div class="input-group" style="flex: 1.45; margin-right: 30px">
            <div class="input-group-prepend bg-transparent">
                <i class="input-group-text border-0 mdi mdi-magnify" style="color: #000000; background: #ffffff;"></i>
            </div>
            <input type="text"
                   class="form-control bg-transparent border-0"
                   maxlength="30"
                   style="color: #000000; background: #ffffff !important; font-size: 15px;"
                   name="query"
                   placeholder="Tìm kiếm theo tên sản phẩm"
                   value="@Model?.Query" />
        </div>

        <!-- Giá tối thiểu -->
        <div class="input-group" style="flex: 0.7; margin-right: 05px">
            <div class="input-group-prepend bg-transparent">
                <i class="input-group-text border-0 mdi mdi-currency-usd" style="color: #000000; background: #ffffff;"></i>
            </div>
            <input type="number"
                   class="form-control bg-transparent border-0"
                   style="color: #000000; background: #ffffff !important; font-size: 15px;"
                   name="minPrice"
                   placeholder="Giá tối thiểu"
                   value="@Model?.MinPrice"
                   min="0" max="1000000" step="1" />
        </div>

        <!-- Giá tối đa -->
        <div class="input-group" style="flex: 0.7; margin-right: 30px">
            <div class="input-group-prepend bg-transparent">
                <i class="input-group-text border-0 mdi mdi-currency-usd" style="color: #000000; background: #ffffff;"></i>
            </div>
            <input type="number"
                   class="form-control bg-transparent border-0"
                   style="color: #000000; background: #ffffff !important; font-size: 15px;"
                   name="maxPrice"
                   placeholder="Giá tối đa"
                   value="@Model?.MaxPrice"
                   min="0" max="1000000" step="1" />
        </div>

        <!-- Thương hiệu -->
        <div class="input-group" style="flex: 1; height: 47px !important; font-size: 15px;">
            <select asp-for="BrandId" class="form-control" asp-items="ViewBag.Brands" style="flex: 1; height: 47px !important ; font-size: 15px;">
                <option value="">Nhãn hàng</option>
            </select>
        </div>
    </div>

    <div class="d-flex align-items-center mb-3" style="width: 100%; gap: 10px;">
        <!-- Rating tối thiểu -->
        <div class="input-group" style="flex: 0.7; margin-right: 05px">
            <div class="input-group-prepend bg-transparent">
                <i class="input-group-text border-0 mdi mdi-star" style="color: #000000; background: #ffffff;"></i>
            </div>
            <input type="number"
                   class="form-control bg-transparent border-0"
                   style="color: #000000; background: #ffffff !important; font-size: 15px;"
                   name="minRate"
                   placeholder="Đánh giá tối thiểu"
                   value="@Model?.MinRate"
                   min="0" max="100" step="1" />
        </div>

        <!-- Rating tối đa -->
        <div class="input-group" style="flex: 0.7; margin-right: 30px">
            <div class="input-group-prepend bg-transparent">
                <i class="input-group-text border-0 mdi mdi-star" style="color: #000000; background: #ffffff;"></i>
            </div>
            <input type="number"
                   class="form-control bg-transparent border-0"
                   style="color: #000000; background: #ffffff !important; font-size: 15px;"
                   name="maxRate"
                   placeholder="Đánh giá tối đa"
                   value="@Model?.MaxRate"
                   min="0" max="100" step="1" />
        </div>

        <!-- Discount tối thiểu -->
        <div class="input-group" style="flex: 0.7; margin-right: 05px">
            <div class="input-group-prepend bg-transparent">
                <i class="input-group-text border-0 mdi mdi-tag" style="color: #000000; background: #ffffff;"></i>
            </div>
            <input type="number"
                   class="form-control bg-transparent border-0"
                   style="color: #000000; background: #ffffff !important; font-size: 15px;"
                   name="minDiscount"
                   placeholder="Discount tối thiểu "
                   value="@Model?.MinDiscount"
                   min="0" max="100" step="1" />
        </div>

        <!-- Discount tối đa -->
        <div class="input-group" style="flex: 0.7; margin-right: 30px">
            <div class="input-group-prepend bg-transparent">
                <i class="input-group-text border-0 mdi mdi-tag" style="color: #000000; background: #ffffff;"></i>
            </div>
            <input type="number"
                   class="form-control bg-transparent border-0"
                   style="color: #000000; background: #ffffff !important; font-size: 15px;"
                   name="maxDiscount"
                   placeholder="Discount tối đa"
                   value="@Model?.MaxDiscount"
                   min="0" max="100" step="1" />
        </div>

        <!-- Thương hiệu -->
        <div class="input-group" style="flex: 1; height: 47px !important; font-size: 15px;">
            <select asp-for="TypeId" class="form-control" asp-items="ViewBag.TypeCoffees" style="flex: 1; height: 47px !important ; font-size: 15px;">
                <option value="">Loại đồ uống</option>
            </select>
        </div>
    </div>


    <div class="d-flex justify-content-between align-items-center">
        <div class="d-flex align-items-center">
            <button type="submit" class="btn btn-gradient-success btn-fw" style="padding: 10px 0px 10px 0px !important; min-width: 150px !important; font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;">
                <i class="mdi mdi-magnify"></i> Tìm kiếm
            </button>
            <button type="button" id="clearButton" class="btn btn-gradient-danger btn-fw" style="padding: 10px 0px 10px 0px !important; min-width: 150px !important; margin-left: 10px; font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;">
                <i class="mdi mdi-delete"></i> Đặt lại
            </button>
        </div>
        <div class="d-flex justify-content-end">
            @* <p class="mb-0 me-2">Add new Product</p> *@
            @* <a href="/Admin/Admin/Create" *@
            @*    class="btn btn-gradient-info btn-rounded btn-icon d-flex justify-content-center align-items-center p-0" *@
            @*    title="Add new product"> *@
            @*     <i class="mdi mdi-plus"></i> *@
            @* </a> *@ 
            <button type="button" id="bulkDeleteBtn" class="btn btn-outline-danger btn-icon-text" style="padding: 10px 30px 10px 30px !important; min-width: 120px !important">
                <i class="fa fa-trash-o"></i> Delete
            </button>
        </div>
    </div>
</form>


@if (ViewBag.Message != null)
{
    <p>@ViewBag.Message</p>
}
<table class="table">
    <thead>
        <tr style="text-align: center;  font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;">
            <th>
                <input type="checkbox" id="selectAll" class="form-check-input" />
            </th>
            <th class="sortable" data-sort="product_id">
                ID sản phẩm <i class="sort-icon mdi mdi-sort"></i>
            </th>
            <th>Hình ảnh</th>
            <th class="sortable" data-sort="productName">
                Tên sản phẩm <i class="sort-icon mdi mdi-sort"></i>
            </th>
            <th class="sortable" data-sort="price">
                Giá <i class="sort-icon mdi mdi-sort"></i>
            </th>
            <th class="sortable" data-sort="rating">
                Đánh giá <i class="sort-icon mdi mdi-sort"></i>
            </th>
            <th class="sortable" data-sort="reviewCount">
                Tổng số đánh giá <i class="sort-icon mdi mdi-sort"></i>
            </th>
            <th class="sortable" data-sort="brandName">
                Nhãn hàng <i class="sort-icon mdi mdi-sort"></i>
            </th>
            <th class="sortable" data-sort="typeName">
                Loại <i class="sort-icon mdi mdi-sort"></i>
            </th>
            <th class="sortable" data-sort="discount">
                Giảm giá <i class="sort-icon mdi mdi-sort"></i>
            </th>
            <th>Phương thức</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in Model.Product)
        {
            <tr>
                <td style="text-align: center;">
                    <input type="checkbox" name="selectedProducts" value="@product.Product_id" class="form-check-input product-checkbox" />
                </td>
                <td style="text-align: center;">@product.Product_id</td>
                <td style="text-align: center;">
                    <img src="~/img/@(product.Brand?.BrandName ?? "default")/@(product.TypeCoffee?.TypeName ?? "default")/@(product.Image ?? "default.jpg")"
                         alt="@product.ProductName"
                         width="50" />

                </td>

                <td style="text-align: center;">@product.ProductName</td>
                <td style="text-align: right; padding-right: 3%">₫@product.Price.ToString("#,0").Replace(",", ".")</td>
                <td style="text-align: right; padding-right: 4%">@product.Rating</td>
                <td style="text-align: right; padding-right: 6%">@product.ReviewCount</td>
                <td style="text-align: center;">
                    @product.Brand?.BrandName
                </td>
                <td style="text-align: center;">@product.TypeCoffee?.TypeName</td>
                <td style="text-align: right; padding-right: 4%">@(product.Discount)% </td>
                <td class="d-flex justify-content-start" style="display: flex; justify-content: center !important; align-items: center !important; height: 100% !important; height: 67px !important ">
                    <div class="me-1 tooltip-container" style="display: flex; justify-content: center !important; align-items: center !important; height: 100% !important;">
                        <button type="button"
                                class="btn btn-link p-0 edit-product-btn"
                                style="border: none; background: transparent;"
                                data-product-id="@product.Product_id"
                                data-product-name="@product.ProductName">
                            <i class="mdi mdi-table-edit btn-icon-prepend" style="font-size: 24px;"></i>
                        </button>
                        <span class="tooltip-text">Chỉnh sửa</span>
                    </div>

                    <div class="me-1 tooltip-container" style="display: flex; justify-content: center !important; align-items: center !important; height: 100% !important;">
                        <button type="button"
                                class="btn btn-link p-0 restore-product-btn"
                                style="border: none; background: transparent;"
                                data-product-id="@product.Product_id"
                                data-product-name="@product.ProductName">
                            <i class="mdi mdi-backup-restore btn-icon-prepend" style="font-size: 24px;"></i>
                        </button>
                        <span class="tooltip-text">Khôi phục</span>
                    </div>

                    <div class="tooltip-container" style="display: flex; justify-content: center !important; align-items: center !important; height: 100% !important;">
                        <button type="button"
                                class="btn btn-link p-0 delete-product-btn"
                                style="border: none; background: transparent;"
                                data-product-id="@product.Product_id"
                                data-product-name="@product.ProductName">
                            <i class="mdi mdi-delete-forever btn-icon-prepend" style="font-size: 24px;"></i>
                        </button>
                        <span class="tooltip-text">Xóa</span>
                    </div>

                    <style>
                        .tooltip-container {
                            display: flex;
                            justify-content: center !important; /* Căn giữa ngang */
                            align-items: center !important; /* Căn giữa dọc */
                            height: 100% !important; /* Đặt chiều cao nếu cần */
                        }
                        /* Màu ban đầu của icon và chữ "Edit" */
                        .btn-link i {
                            color: #A2A1A1; /* Màu icon khi chưa hover */
                        }

                        .btn-link .edit-text {
                            color: #A2A1A1; /* Màu chữ "Edit" khi chưa hover */
                        }

                        /* Màu ban đầu của icon và chữ "Delete" */
                        .btn-link .delete-text {
                            color: #D52424; /* Màu chữ "Delete" khi chưa hover */
                        }

                        /* Hiển thị chữ "Delete" khi hover */
                        .btn-link:hover .delete-text {
                            display: inline;
                            font-size: 14px;
                            color: #F37D7D; /* Màu của chữ Delete */
                        }

                        .btn-link:hover .edit-text {
                            display: inline;
                            font-size: 14px;
                            color: #28a745; /* Màu của chữ Edit khi hover */
                        }

                        /* Hiển thị màu của icon khi hover */
                        .btn-link:hover i {
                            color: #F37D7D; /* Màu icon khi hover */
                        }

                        /* Màu icon "Edit" khi hover */
                        .btn-link:hover .mdi-table-edit {
                            color: #28a745; /* Màu icon khi hover */
                        }

                        /* Căn chỉnh giữa icon và button */
                        .btn-link {
                            display: flex;
                            align-items: center;
                            justify-content: center;
                            padding: 0;
                        }

                        /* Đảm bảo icon được căn giữa đúng */
                        .mdi {
                            vertical-align: middle; /* Đảm bảo icon căn giữa dòng */
                        }
                    </style>
                </td>
            </tr>
        }
    </tbody>
</table>
<div class="pagination-container mt-4 d-flex justify-content-between align-items-center">
    <div class="page-info">
        Hiển thị từ <span id="startIndex">1</span> đến <span id="endIndex">10</span> của <span id="totalItems">0</span> sản phẩm
    </div>
    <ul class="pagination">
        <li class="page-item" id="previousPage">
            <a class="page-link" href="#" aria-label="Previous">
                <span aria-hidden="true">&laquo;</span>
            </a>
        </li>
        <li class="page-item" id="nextPage">
            <a class="page-link" href="#" aria-label="Next">
                <span aria-hidden="true">&raquo;</span>
            </a>
        </li>
    </ul>
</div>






<!-- --------------------------------CLEARBUTTON-------------------------->
<script>
    document.getElementById('clearButton').addEventListener('click', () => {
        // Lấy tất cả các input trong form
        const inputs = document.querySelectorAll('form input[type="text"], form input[type="number"], form select');

        // Reset tất cả input về giá trị mặc định
        inputs.forEach(input => {
            if (input.type === 'text' || input.type === 'number') {
                input.value = ''; // Reset các trường text và number
            } else if (input.tagName.toLowerCase() === 'select') {
                input.selectedIndex = 0; // Reset các trường select về option đầu tiên
            }
        });
    });
</script>
<!-- ----------------------------------------------------------------------->
 



<!-- Result Modal -->
<div class="modal fade" id="resultModal" tabindex="-1" aria-labelledby="resultModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="resultModalLabel">Notification</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="resultMessage"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="createProductModal" tabindex="-1" aria-labelledby="createProductModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="createProductModalLabel">Add New Product</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="createProductForm">
                @Html.AntiForgeryToken()

                <div class="modal-body">
                    <div class="row g-3">
                        <!-- Product ID (readonly) -->
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="Product_id" class="form-label">
                                    Product ID <span class="required">*</span>
                                </label>
                                <input type="text" class="form-control" id="Product_id" name="Product_id" readonly>
                            </div>
                        </div>

                        <!-- Product Name -->
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="ProductName" class="form-label">Product Name  <span class="required">*</span></label>
                                <input type="text" class="form-control" id="ProductName" name="ProductName" maxlength="50" required style="flex: 1; height: 47px !important ;  font-size: 15px;">
                                <div class="invalid-feedback">Please provide a valid name (up to 50 characters).</div>
                            </div>
                        </div>

                        <!-- Brand -->
                        <div class="col-md-6" style="margin-top: 0px !important">
                            <div class="form-group">
                                <label for="BrandId1" class="form-label">Brand  <span class="required">*</span> </label>
                                <select class="form-control" id="BrandId1" name="BrandId1" required style="flex: 1; height: 47px !important ;  font-size: 15px;">
                                    <option value="">Select Brand</option>
                                    @foreach (var item in ViewBag.Brands)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                </select>
                                <div class="invalid-feedback">Please select a brand.</div>
                            </div>
                        </div>

                        <!-- Type -->
                        <div class="col-md-6" style="margin-top: 0px !important">
                            <div class="form-group">
                                <label for="TypeId1" class="form-label">Type  <span class="required">*</span></label>
                                <select class="form-control" id="TypeId1" name="TypeId1" required style="flex: 1; height: 47px !important ;  font-size: 15px;">
                                    <option value="">Select Type</option>
                                    @foreach (var item in ViewBag.TypeCoffees)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                </select>
                                <div class="invalid-feedback">Please select a type.</div>
                            </div>
                        </div>
                        <!-- Price -->
                        <div class="col-md-6" style="margin-top: 0px !important">
                            <div class="form-group">
                                <label for="Price" class="form-label">Price  <span class="required">*</span> </label>
                                <input type="number" class="form-control" id="Price" name="Price"
                                       required min="0" max="1000" step="0.01" value="0" style="flex: 1; height: 47px !important ;  font-size: 15px;">
                                <div class="invalid-feedback">Price must be between 0 and 1000.</div>
                            </div>
                        </div>


                        <!-- Discount -->
                        <div class="col-md-6" style="margin-top: 0px !important">
                            <div class="form-group">
                                <label for="Discount" class="form-label">Discount (%)</label>
                                <input type="number" class="form-control" id="Discount" name="Discount"
                                       required min="0" max="100" value="0" style="flex: 1; height: 47px !important ;  font-size: 15px;">
                                <div class="invalid-feedback">Discount must be between 0 and 100.</div>
                            </div>
                        </div>
                        <!-- Rating -->
                        <div class="col-md-6" style="margin-top: 0px !important">
                            <div class="form-group">
                                <label for="Rating" class="form-label">Rating</label>
                                <input type="number" class="form-control" id="Rating" name="Rating"
                                       required min="0" max="100" value="0" style="flex: 1; height: 47px !important ;  font-size: 15px;">
                                <div class="invalid-feedback">Rating must be between 0 and 100.</div>
                            </div>
                        </div>


                        <!-- Review Count -->
                        <div class="col-md-6" style="margin-top: 0px !important">
                            <div class="form-group">
                                <label for="ReviewCount" class="form-label">Review Count</label>
                                <input type="number" class="form-control" id="ReviewCount" name="ReviewCount"
                                       required min="0" value="0" style="flex: 1; height: 47px !important ;  font-size: 15px;">
                                <div class="invalid-feedback">Please provide a valid review count.</div>
                            </div>
                        </div>

                        <!-- Image Upload -->
                        <div class="col-md-6" style="margin-top: 0px !important">
                            <div class="form-group">
                                <label for="ProductImage" class="form-label">Product Image  <span class="required">*</span> </label>
                                <input type="file" class="form-control" id="ProductImage" name="ProductImage"
                                       accept="image/*" required>
                                <div class="invalid-feedback">Please select an image.</div>
                            </div>
                            <!-- Image Preview -->
                            <div class="mt-2">
                                <img id="imagePreview" src="#" alt="Preview" style="max-width: 200px; display: none;">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success">Create Product</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!------------------- Edit Product Modal ------------------------------->
<div class="modal fade" id="editProductModal" tabindex="-1" aria-labelledby="editProductModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="editProductModalLabel" style="font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;">Chỉnh sửa sản phẩm</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="editProductForm">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <div class="row g-3">
                        <!-- Product ID -->
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="EditProduct_id" class="form-label">ID sản phẩm <span class="required">*</span></label>
                                <input type="text" class="form-control" id="EditProduct_id" name="Product_id" readonly>
                                <small class="form-text text-muted">ID sản phẩm không thể chỉnh sửa</small>
                            </div>
                        </div>

                        <!-- Product Name -->
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="EditProductName" class="form-label">Tên sản phẩm <span class="required">*</span></label>
                                <input type="text" class="form-control" id="EditProductName" name="ProductName"
                                       maxlength="50" required style="height: 47px; font-size: 15px;" pattern="^[a-zA-Z0-9\s\-_]+$">
                                <small class="form-text text-muted">Chỉ chấp nhận chữ cái, số và dấu gạch ngang, tối đa 50 ký tự</small>
                                <div class="invalid-feedback">Vui lòng nhập tên sản phẩm hợp lệ</div>
                            </div>
                        </div>

                        <!-- Brand -->
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="EditBrandId" class="form-label">Nhãn hàng <span class="required">*</span></label>
                                <select class="form-control" id="EditBrandId" name="BrandId" required style="height: 47px; font-size: 15px;">
                                    <option value="">Chọn nhãn hàng</option>
                                    @foreach (var item in ViewBag.Brands)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                </select>
                                <small class="form-text text-muted">Chọn nhãn hàng phù hợp với sản phẩm</small>
                                <div class="invalid-feedback">Vui lòng chọn nhãn hàng</div>
                            </div>
                        </div>

                        <!-- Type -->
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="EditTypeId" class="form-label">Loại sản phẩm <span class="required">*</span></label>
                                <select class="form-control" id="EditTypeId" name="TypeId" required style="height: 47px; font-size: 15px;">
                                    <option value="">Chọn loại sản phẩm</option>
                                    @foreach (var item in ViewBag.TypeCoffees)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                </select>
                                <small class="form-text text-muted">Chọn loại sản phẩm phù hợp</small>
                                <div class="invalid-feedback">Vui lòng chọn loại sản phẩm</div>
                            </div>
                        </div>

                        <!-- Price -->
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="EditPrice" class="form-label">Giá <span class="required">*</span></label>
                                <input type="number" class="form-control" id="EditPrice" name="Price"
                                       required min="0" max="1000000" step="1000" style="height: 47px; font-size: 15px;">
                                <small class="form-text text-muted">Nhập giá từ 0đ đến 1.000.000đ (bước nhảy 1.000đ)</small>
                                <div class="invalid-feedback">Giá phải từ 0đ đến 1.000.000đ</div>
                            </div>
                        </div>

                        <!-- Discount -->
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="EditDiscount" class="form-label">Giảm giá (%)</label>
                                <input type="number" class="form-control" id="EditDiscount" name="Discount"
                                       required min="0" max="100" style="height: 47px; font-size: 15px;">
                                <small class="form-text text-muted">Nhập phần trăm giảm giá từ 0% đến 100%</small>
                                <div class="invalid-feedback">Giảm giá phải từ 0% đến 100%</div>
                            </div>
                        </div>

                        <!-- Rating -->
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="EditRating" class="form-label">Đánh giá</label>
                                <input type="number" class="form-control" id="EditRating" name="Rating"
                                       required min="0" max="5" step="0.5" style="height: 47px; font-size: 15px;">
                                <small class="form-text text-muted">Đánh giá từ 0 đến 100 điểm (bước nhảy 1)</small>
                                <div class="invalid-feedback">Đánh giá phải từ 0 đến 100</div>
                            </div>
                        </div>

                        <!-- Review Count -->
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="EditReviewCount" class="form-label">Số lượng đánh giá</label>
                                <input type="number" class="form-control" id="EditReviewCount" name="ReviewCount"
                                       required min="0" style="height: 47px; font-size: 15px;">
                                <small class="form-text text-muted">Nhập số lượng đánh giá của sản phẩm</small>
                                <div class="invalid-feedback">Số lượng đánh giá không hợp lệ</div>
                            </div>
                        </div>

                        <!-- Image Upload -->
                        <div class="col-md-12">
                            <div class="form-group">
                                <label for="EditProductImage" class="form-label">Cập nhật hình ảnh sản phẩm</label>
                                <input type="file" class="form-control" id="EditProductImage" name="ProductImage"
                                       accept="image/jpeg,image/png,image/jpg">
                                <small class="form-text text-muted">Chấp nhận ảnh JPG, JPEG, PNG (tối đa 2MB)</small>
                                <div class="invalid-feedback">Vui lòng chọn ảnh hợp lệ</div>
                            </div>
                            <div class="mt-2">
                                <label class="form-label">Ảnh hiện tại:</label>
                                <img id="currentImagePreview" src="#" alt="Current" style="max-width: 200px; display: none;">
                            </div>
                            <div class="mt-2">
                                <label class="form-label">Xem trước ảnh tải lên:</label>
                                <img id="newImagePreview" src="#" alt="New" style="max-width: 200px; display: none;">
                            </div>
                        </div>

                        <!-- Description -->
                        <div class="col-md-12">
                            <div class="form-group">
                                <label for="EditDescription" class="form-label">Mô tả sản phẩm</label>
                                <textarea id="EditDescription" name="Description" class="form-control"></textarea>
                                <small class="form-text text-muted">Mô tả chi tiết về sản phẩm (không bắt buộc)</small>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"  style="font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;">Hủy</button>
                    <button type="submit" class="btn btn-primary" style="font-family: 'Roboto', 'Open Sans', Arial, sans-serif !important; font-weight: bold;">Cập nhật</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Edit button click handler
        document.querySelectorAll('form[asp-action="Edit"]').forEach(form => {
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                const productId = this.getAttribute('asp-route-id');
                try {
                    const response = await fetch(`/Admin/Admin/GetProduct/${productId}`);
                    if (!response.ok) throw new Error('Failed to fetch product data');
                    const product = await response.json();

                    // Populate form fields
                    document.getElementById('EditProduct_id').value = product.product_id;
                    document.getElementById('EditProductName').value = product.productName;
                    document.getElementById('EditPrice').value = product.price;
                    document.getElementById('EditDiscount').value = product.discount;
                    document.getElementById('EditRating').value = product.rating;
                    document.getElementById('EditReviewCount').value = product.reviewCount;
                    document.getElementById('EditBrandId').value = product.brand_id;
                    document.getElementById('EditTypeId').value = product.type_id;

                    // Show current image
                    const currentImagePreview = document.getElementById('currentImagePreview');
                    currentImagePreview.src = `/img/${product.brand?.brandName}/${product.typeCoffee?.typeName}/${product.image}`;
                    currentImagePreview.style.display = 'block';

                    // Show edit modal
                    const editModal = new bootstrap.Modal(document.getElementById('editProductModal'));
                    editModal.show();
                } catch (error) {
                    console.error('Error:', error);
                    alert('Error fetching product details');
                }
            });
        });

        // Handle image preview for new image upload
        document.getElementById('EditProductImage').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const preview = document.getElementById('newImagePreview');
                    preview.src = e.target.result;
                    preview.style.display = 'block';
                }
                reader.readAsDataURL(file);
            }
        });

        // Handle form submission
        document.getElementById('editProductForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            const submitButton = this.querySelector('button[type="submit"]');
            const originalButtonText = submitButton.innerHTML;

            try {
                if (!this.checkValidity()) {
                    e.stopPropagation();
                    this.classList.add('was-validated');
                    return;
                }

                submitButton.disabled = true;
                submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Updating...';

                const imageFile = document.getElementById('EditProductImage').files[0];
                let imageBase64 = '';
                if (imageFile) {
                    imageBase64 = await new Promise((resolve) => {
                        const reader = new FileReader();
                        reader.onloadend = () => resolve(reader.result);
                        reader.readAsDataURL(imageFile);
                    });
                }

                const productData = {
                    ProductId: document.getElementById('EditProduct_id').value,
                    ProductName: document.getElementById('EditProductName').value,
                    Price: parseFloat(document.getElementById('EditPrice').value),
                    Rating: parseInt(document.getElementById('EditRating').value),
                    Discount: parseInt(document.getElementById('EditDiscount').value),
                    BrandId: document.getElementById('EditBrandId').value,
                    TypeId: document.getElementById('EditTypeId').value,
                    ReviewCount: parseInt(document.getElementById('EditReviewCount').value),
                    ImageBase64: imageBase64
                };

                const response = await fetch('/Admin/Admin/Edit', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(productData)
                });

                if (!response.ok) throw new Error(`Server error: ${response.status}`);
                const result = await response.json();

                if (result.success) {
                    const successMessage = `
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            <i class="bi bi-check-circle me-1"></i>
                            Cập nhật sản phẩm thành công
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>`;
                    document.querySelector('.modal-body').insertAdjacentHTML('afterbegin', successMessage);

                    setTimeout(() => {
                        const modal = bootstrap.Modal.getInstance(document.getElementById('editProductModal'));
                        modal.hide();
                        window.location.reload();
                    }, 1500);
                } else {
                    throw new Error(result.message || 'Failed to update product');
                }
            } catch (error) {
                console.error('Error:', error);
                const errorMessage = `
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <i class="bi bi-exclamation-octagon me-1"></i>
                        ${error.message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>`;
                document.querySelector('.modal-body').insertAdjacentHTML('afterbegin', errorMessage);
            } finally {
                submitButton.disabled = false;
                submitButton.innerHTML = originalButtonText;
            }
        });

        // Clear form when modal is hidden
        document.getElementById('editProductModal').addEventListener('hidden.bs.modal', function() {
            const form = document.getElementById('editProductForm');
            form.reset();
            form.classList.remove('was-validated');
            document.getElementById('newImagePreview').style.display = 'none';
            document.getElementById('currentImagePreview').style.display = 'none';
        });
    });
</script>

<style>
    #editProductModal .modal-dialog {
        max-width: 800px;
    }

    #editProductModal .form-label {
        font-weight: 500;
        margin-bottom: 0.3rem;
    }

    #currentImagePreview, #newImagePreview {
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-top: 10px;
    }

    .modal-header.bg-primary .btn-close {
        filter: brightness(0) invert(1);
    }
</style>

<!----------------------------------------------------------------------->

<script>
    // Script xử lý nút Edit
    document.addEventListener('DOMContentLoaded', function() {
        // Edit button click handler
        document.querySelectorAll('.edit-product-btn').forEach(button => {
            button.addEventListener('click', async function(e) {
                e.preventDefault();
                const productId = this.getAttribute('data-product-id');
                try {
                    const response = await fetch(`/Admin/Admin/GetProduct/${productId}`);
                    if (!response.ok) throw new Error('Failed to fetch product data');
                    const product = await response.json();

                    // Populate form fields
                    document.getElementById('EditProduct_id').value = product.product_id;
                    document.getElementById('EditProductName').value = product.productName;
                    document.getElementById('EditPrice').value = product.price;
                    document.getElementById('EditDiscount').value = product.discount;
                    document.getElementById('EditRating').value = product.rating;
                    document.getElementById('EditReviewCount').value = product.reviewCount;
                    document.getElementById('EditBrandId').value = product.brand_id;
                    document.getElementById('EditTypeId').value = product.type_id;

                    // Show current image
                    const currentImagePreview = document.getElementById('currentImagePreview');
                    currentImagePreview.src = `/img/${product.brand?.brandName}/${product.typeCoffee?.typeName}/${product.image}`;
                    currentImagePreview.style.display = 'block';

                    // Show edit modal
                    const editModal = new bootstrap.Modal(document.getElementById('editProductModal'));
                    editModal.show();
                } catch (error) {
                    console.error('Error:', error);
                    alert('Error fetching product details');
                }
            });
        });
    });
</script>

<style>
    #editProductModal .modal-dialog {
        max-width: 800px;
    }

    #editProductModal .form-label {
        font-weight: 500;
        margin-bottom: 0.3rem;
    }

    #currentImagePreview, #newImagePreview {
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-top: 10px;
    }

    .modal-header.bg-primary .btn-close {
        filter: brightness(0) invert(1);
    }
</style>










<script>
    document.addEventListener('DOMContentLoaded', function() {
    // Show modal and get new product ID
    document.querySelector('.btn-outline-success').addEventListener('click', async function() {
        try {
            // Lấy ID mới
            const idResponse = await fetch('/Admin/Admin/GetNewProductId');
            if (!idResponse.ok) throw new Error('Failed to get new ID');
            const idData = await idResponse.json();

            if (!idData.success) {
                throw new Error(idData.message || 'Failed to get new ID');
            }

            document.getElementById('Product_id').value = idData.productId;

            // Sử dụng trực tiếp ViewBag.Brands và ViewBag.TypeCoffees từ select lists trong view

            // Không cần clear và populate lại vì đã có sẵn options từ ViewBag

            // Show modal
            const createModal = new bootstrap.Modal(document.getElementById('createProductModal'));
            createModal.show();
        } catch (error) {
            console.error('Error:', error);
            alert(`Error: ${error.message}`);
        }
    });
        // Image preview
        document.getElementById('ProductImage').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const preview = document.getElementById('imagePreview');
                    preview.src = e.target.result;
                    preview.style.display = 'block';
                }
                reader.readAsDataURL(file);
            }
        });
      // Replace the existing submit handler with this one
    document.getElementById('createProductForm').addEventListener('submit', async function(e) {
        e.preventDefault();

        // Get submit button and store text BEFORE any changes
        const submitButton = this.querySelector('button[type="submit"]');
        const originalButtonText = 'Create Product'; // Set default text

        try {
            if (!this.checkValidity()) {
                e.stopPropagation();
                this.classList.add('was-validated');
                return;
            }

    @* var selectedValue = document.getElementById('ReviewCount').value; *@

    @* const brandId = document.getElementById('BrandId').value; *@
            var typeId = document.getElementById('TypeId1').value;
            var brandId = document.getElementById('BrandId1').value;

            if (!brandId || !typeId) {
                alert('Please select both Brand and Type');
                return;
            }

            submitButton.disabled = true;
            submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Creating...';

            const imageFile = document.getElementById('ProductImage').files[0];
            let imageBase64 = '';
            if (imageFile) {
                imageBase64 = await new Promise((resolve) => {
                    const reader = new FileReader();
                    reader.onloadend = () => resolve(reader.result);
                    reader.readAsDataURL(imageFile);
                });
            }

            const productData = {
                ProductId: document.getElementById('Product_id').value,
                ProductName: document.getElementById('ProductName').value,
                Price: parseFloat(document.getElementById('Price').value),
                Rating: parseInt(document.getElementById('Rating').value),
                Discount: parseInt(document.getElementById('Discount').value),
                BrandId: brandId,
                TypeId: typeId,
                ReviewCount: parseInt(document.getElementById('ReviewCount').value),
                ImageBase64: imageBase64
            };
            console.log(productData);
            const response = await fetch('/Admin/Admin/Create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(productData)
            });

            if (!response.ok) {
                throw new Error(`Server error: ${response.status}`);
            }

            const result = await response.json();

            if (result.success) {
                const successMessage = `
                    <div class="alert alert-success alert-dismissible fade show" role="alert">
                        <i class="bi bi-check-circle me-1"></i>
                        Product created successfully
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>`;
                document.querySelector('.modal-body').insertAdjacentHTML('afterbegin', successMessage);

                setTimeout(() => {
                    const modal = bootstrap.Modal.getInstance(document.getElementById('createProductModal'));
                    modal.hide();
                    window.location.reload();
                }, 1500);
            } else {
                throw new Error(result.message || 'Failed to create product');
            }
        } catch (error) {
            console.error('Error:', error);
            const errorMessage = `
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="bi bi-exclamation-octagon me-1"></i>
                    ${error.message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>`;
            document.querySelector('.modal-body').insertAdjacentHTML('afterbegin', errorMessage);
        } finally {
            submitButton.disabled = false;
            submitButton.innerHTML = originalButtonText;
        }
    });
        // Clear form when modal is hidden
        document.getElementById('createProductModal').addEventListener('hidden.bs.modal', function() {
            const form = document.getElementById('createProductForm');
            form.reset();
            form.classList.remove('was-validated');
            document.getElementById('imagePreview').style.display = 'none';
        });
    });
</script>

<style>
    #createProductModal .modal-dialog {
        max-width: 800px;
    }

    #createProductModal .form-label {
        font-weight: 500;
        margin-bottom: 0.3rem;
    }

    #imagePreview {
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-top: 10px;
    }
</style>

<style>
    .modal-header.bg-danger .btn-close {
        filter: brightness(0) invert(1);
    }

    .modal-body .mdi {
        vertical-align: middle;
    }

    .modal-dialog {
        max-width: 400px;
    }

    .modal-content {
        border-radius: 8px;
    }

    .modal-header {
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Update bulk delete button text
        const bulkDeleteBtn = document.getElementById('bulkDeleteBtn');
        if (bulkDeleteBtn) {
            bulkDeleteBtn.innerHTML = '<i class="fa fa-undo" style = " font-family: "Roboto", "Open Sans", Arial, sans-serif !important; font-weight: bold;"></i> Khôi phục';
            bulkDeleteBtn.classList.remove('btn-outline-danger');
            bulkDeleteBtn.classList.add('btn-outline-success');
            bulkDeleteBtn.id = 'bulkRestoreBtn';
        }

        // Handle restore button clicks
        document.querySelectorAll('.restore-product-btn').forEach(button => {
            button.addEventListener('click', async function() {
                const productId = this.getAttribute('data-product-id');
                const productName = this.getAttribute('data-product-name');

                const result = await Swal.fire({
                    title:  '<span style="font-family: "Roboto", "Open Sans", Arial, sans-serif !important; font-weight: bold;">Khôi phục sản phẩm?</span>',
                    text: `Bạn có muốn khôi phục sản phẩm ${productName}?`,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#28a745',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: 'Đúng, khôi phục đi!',
                    cancelButtonText: 'Hủy'
                });

                if (result.isConfirmed) {
                    try {
                        const response = await fetch(`/Admin/Admin/RestoreProduct/${productId}`, {
                            method: 'POST',
                            headers: {
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            }
                        });

                        if (response.ok) {
                            await Swal.fire({
                                icon: 'success',
                                title: 'Đã khôi phục!',
                                text: 'Sản phẩm khôi phục thành công.',
                                showConfirmButton: false,
                                timer: 1500
                            });
                            window.location.reload();
                        } else {
                            throw new Error('Failed to restore product');
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to restore the product',
                        });
                    }
                }
            });
        });

        // Handle permanent delete button clicks
        document.querySelectorAll('.delete-product-btn').forEach(button => {
            button.addEventListener('click', async function() {
                const productId = this.getAttribute('data-product-id');
                const productName = this.getAttribute('data-product-name');

                const result = await Swal.fire({
                    title: 'Xóa vĩnh viễn?',
                    text: `Bạn có muốn xóa vĩnh viễn sản phẩm ${productName}?    Hành động này không thể khôi phục!`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#dc3545',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: 'Đúng, Xóa nó!',
                    cancelButtonText: 'Hủy'
                });

                if (result.isConfirmed) {
                    try {
                        const response = await fetch(`/Admin/Admin/DeleteProductPermanently/${productId}`, {
                            method: 'POST',
                            headers: {
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            }
                        });

                        if (response.ok) {
                            await Swal.fire({
                                icon: 'success',
                                title: 'Đã xóa!',
                                text: 'Sản phẩm đã được xóa hoàn toàn.',
                                showConfirmButton: false,
                                timer: 1500
                            });
                            window.location.reload();
                        } else {
                            throw new Error('Failed to delete product');
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to delete the product',
                        });
                    }
                }
            });
        });

        // Handle bulk restore
        document.getElementById('bulkRestoreBtn').addEventListener('click', async function() {
            const selectedProducts = Array.from(document.getElementsByClassName('product-checkbox'))
                .filter(cb => cb.checked)
                .map(cb => cb.value);

            if (selectedProducts.length === 0) {
                await Swal.fire({
                    icon: 'warning',
                    title: 'No Products Selected',
                    text: 'Please select at least one product to restore',
                    confirmButtonColor: '#6c757d'
                });
                return;
            }

            const result = await Swal.fire({
                title: 'Restore Selected Products?',
                text: `Are you sure you want to restore ${selectedProducts.length} selected products?`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#28a745',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, restore them!',
                cancelButtonText: 'Cancel'
            });

            if (result.isConfirmed) {
                try {
                    const response = await fetch('/Admin/Admin/BulkRestoreProducts', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify(selectedProducts)
                    });

                    const result = await response.json();

                    if (result.success) {
                        await Swal.fire({
                            icon: 'success',
                            title: 'Restored!',
                            text: 'Selected products have been restored successfully.',
                            showConfirmButton: false,
                            timer: 1500
                        });
                        window.location.reload();
                    } else {
                        throw new Error(result.message || 'Failed to restore products');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to restore selected products',
                    });
                }
            }
        });
    });
</script>

<style>
    .btn-link i {
        color: #A2A1A1;
    }

    .restore-product-btn:hover i {
        color: #28a745;
    }

    .delete-product-btn:hover i {
        color: #dc3545;
    }

    .tooltip-container {
        position: relative;
        display: inline-block;
        margin-right: 10px;
    }

        .tooltip-container .tooltip-text {
            visibility: hidden;
            width: 120px;
            background-color: #333;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 5px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            transform: translateX(-50%);
            opacity: 0;
            transition: opacity 0.3s;
        }

        .tooltip-container:hover .tooltip-text {
            visibility: visible;
            opacity: 1;
        }

    /* SweetAlert2 Custom Styles */
    .swal2-popup {
        font-size: 0.9rem !important;
    }

    .swal2-title {
        font-size: 1.5rem !important;
    }

    .swal2-html-container {
        font-size: 1rem !important;
    }

    .swal2-confirm {
        padding: 0.5rem 1.5rem !important;
    }

    .swal2-cancel {
        padding: 0.5rem 1.5rem !important;
    }
</style>


<!---------------------------------------Sort table-------------------------------->
<style>
    .sortable {
        cursor: pointer;
        user-select: none;
    }

        .sortable:hover {
            background-color: #f8f9fa;
        }

    .sort-icon {
        font-size: 18px;
        vertical-align: middle;
        margin-left: 5px;
        opacity: 0.3;
    }

    .sortable.asc .sort-icon {
        opacity: 1;
        transform: rotate(180deg);
    }

    .sortable.desc .sort-icon {
        opacity: 1;
        transform: rotate(0deg);
    }

    /* Thêm hiệu ứng hover cho header có thể sắp xếp */
    .sortable:hover .sort-icon {
        opacity: 0.6;
    }
</style>
<script>

    document.addEventListener('DOMContentLoaded', function() {
        const tableBody = document.querySelector('table tbody');
        const headers = document.querySelectorAll('th.sortable');
        let currentSort = {
            column: null,
            direction: 'asc'
        };

        headers.forEach(header => {
            header.addEventListener('click', () => {
                const column = header.dataset.sort;

                // Reset other headers
                headers.forEach(h => {
                    if (h !== header) {
                        h.classList.remove('asc', 'desc');
                    }
                });

                // Toggle sort direction
                if (currentSort.column === column) {
                    currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
                    header.classList.toggle('asc', currentSort.direction === 'asc');
                    header.classList.toggle('desc', currentSort.direction === 'desc');
                } else {
                    currentSort.column = column;
                    currentSort.direction = 'asc';
                    header.classList.remove('desc');
                    header.classList.add('asc');
                }

                // Get all rows and convert to array for sorting
                const rows = Array.from(tableBody.querySelectorAll('tr'));

                // Sort rows
                rows.sort((a, b) => {
                    let aValue, bValue;

                    switch(column) {
                        case 'product_id':
                            aValue = a.cells[1].textContent;
                            bValue = b.cells[1].textContent;
                            break;
                        case 'productName':
                            aValue = a.cells[3].textContent;
                            bValue = b.cells[3].textContent;
                            break;
                        case 'price':
                            aValue = parseFloat(a.cells[4].textContent.replace('$', ''));
                            bValue = parseFloat(b.cells[4].textContent.replace('$', ''));
                            break;
                        case 'rating':
                            aValue = parseFloat(a.cells[5].textContent);
                            bValue = parseFloat(b.cells[5].textContent);
                            break;
                        case 'reviewCount':
                            aValue = parseInt(a.cells[6].textContent);
                            bValue = parseInt(b.cells[6].textContent);
                            break;
                        case 'brandName':
                            aValue = a.cells[7].textContent;
                            bValue = b.cells[7].textContent;
                            break;
                        case 'typeName':
                            aValue = a.cells[8].textContent;
                            bValue = b.cells[8].textContent;
                            break;
                        case 'discount':
                            aValue = parseFloat(a.cells[9].textContent);
                            bValue = parseFloat(b.cells[9].textContent);
                            break;
                        default:
                            return 0;
                    }

                    // Handle numeric sorting
                    if (typeof aValue === 'number' && typeof bValue === 'number') {
                        return currentSort.direction === 'asc' ? aValue - bValue : bValue - aValue;
                    }

                    // Handle string sorting
                    return currentSort.direction === 'asc'
                        ? String(aValue).localeCompare(String(bValue))
                        : String(bValue).localeCompare(String(aValue));
                });

                // Remove existing rows
                while (tableBody.firstChild) {
                    tableBody.removeChild(tableBody.firstChild);
                }

                // Add sorted rows
                rows.forEach(row => tableBody.appendChild(row));

                // Save the current sort state
                localStorage.setItem('currentSort', JSON.stringify(currentSort));
            });
        });

        // Restore sort state on page load
        const savedSort = localStorage.getItem('currentSort');
        if (savedSort) {
            const { column, direction } = JSON.parse(savedSort);
            const header = document.querySelector(`th[data-sort="${column}"]`);
            if (header) {
                header.classList.add(direction);
                header.click();
            }
        }
    });
</script>
<!--------------------------------------------------------------------------------->
<!--------------------------------------------phân trang------------------------------->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const ITEMS_PER_PAGE = 10;
        let currentPage = 1;
        const tableBody = document.querySelector('table tbody');
        const allRows = Array.from(tableBody.querySelectorAll('tr'));
        const totalPages = Math.ceil(allRows.length / ITEMS_PER_PAGE);

        // Update pagination info
        document.getElementById('totalItems').textContent = allRows.length;

        function updatePaginationControls() {
            const previousBtn = document.getElementById('previousPage');
            const nextBtn = document.getElementById('nextPage');

            // Update Previous button state
            previousBtn.classList.toggle('disabled', currentPage === 1);

            // Update Next button state
            nextBtn.classList.toggle('disabled', currentPage === totalPages);

            // Update page numbers
            const startIndex = ((currentPage - 1) * ITEMS_PER_PAGE) + 1;
            const endIndex = Math.min(currentPage * ITEMS_PER_PAGE, allRows.length);
            document.getElementById('startIndex').textContent = startIndex;
            document.getElementById('endIndex').textContent = endIndex;

            // Update page numbers display
            updatePageNumbers();
        }

        function updatePageNumbers() {
            const pagination = document.querySelector('.pagination');
            const previousBtn = document.getElementById('previousPage');
            const nextBtn = document.getElementById('nextPage');

            // Remove existing page numbers
            const existingPageNums = document.querySelectorAll('.page-number');
            existingPageNums.forEach(num => num.remove());

            // Calculate range of page numbers to show
            let startPage = Math.max(1, currentPage - 2);
            let endPage = Math.min(totalPages, currentPage + 2);

            // Adjust range if at edges
            if (currentPage <= 3) {
                endPage = Math.min(5, totalPages);
            } else if (currentPage >= totalPages - 2) {
                startPage = Math.max(1, totalPages - 4);
            }

            // Insert page numbers
            for (let i = startPage; i <= endPage; i++) {
                const pageItem = document.createElement('li');
                pageItem.className = `page-item page-number ${i === currentPage ? 'active' : ''}`;
                pageItem.innerHTML = `<a class="page-link" href="#">${i}</a>`;
                pagination.insertBefore(pageItem, nextBtn);

                pageItem.addEventListener('click', (e) => {
                    e.preventDefault();
                    currentPage = i;
                    showPage(currentPage);
                });
            }
        }

        function showPage(pageNum) {
            const start = (pageNum - 1) * ITEMS_PER_PAGE;
            const end = start + ITEMS_PER_PAGE;

            // Hide all rows
            allRows.forEach(row => row.style.display = 'none');

            // Show only rows for current page
            allRows.slice(start, end).forEach(row => row.style.display = '');

            // Update controls
            currentPage = pageNum;
            updatePaginationControls();
        }

        // Event listeners for pagination controls
        document.getElementById('previousPage').addEventListener('click', (e) => {
            e.preventDefault();
            if (currentPage > 1) {
                showPage(currentPage - 1);
            }
        });

        document.getElementById('nextPage').addEventListener('click', (e) => {
            e.preventDefault();
            if (currentPage < totalPages) {
                showPage(currentPage + 1);
            }
        });

        // Initial page load
        showPage(1);
    });
</script>
<!--------------------------------------------------------------------------------->


<script>
     document.addEventListener('DOMContentLoaded', function() {
        const selectAllCheckbox = document.getElementById('selectAll');
        const productCheckboxes = document.getElementsByClassName('product-checkbox');

        // Handle select all checkbox
        selectAllCheckbox.addEventListener('change', function() {
            Array.from(productCheckboxes).forEach(checkbox => {
                checkbox.checked = this.checked;
            });
            updateRestoreButtonState();
        });

        // Handle individual checkboxes
        Array.from(productCheckboxes).forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                // Check if all checkboxes are checked
                const allChecked = Array.from(productCheckboxes).every(cb => cb.checked);
                const anyChecked = Array.from(productCheckboxes).some(cb => cb.checked);

                // Update select all checkbox
                selectAllCheckbox.checked = allChecked;
                selectAllCheckbox.indeterminate = anyChecked && !allChecked;

                updateRestoreButtonState();
            });
        });

        // Update restore button state based on selections
        function updateRestoreButtonState() {
            const restoreButton = document.getElementById('bulkRestoreBtn');
            const anyChecked = Array.from(productCheckboxes).some(cb => cb.checked);

            if (restoreButton) {
                if (anyChecked) {
                    restoreButton.classList.remove('btn-outline-secondary');
                    restoreButton.classList.add('btn-outline-success');
                    restoreButton.removeAttribute('disabled');
                } else {
                    restoreButton.classList.remove('btn-outline-success');
                    restoreButton.classList.add('btn-outline-secondary');
                    restoreButton.setAttribute('disabled', 'disabled');
                }
            }
        }

        // Initial state setup
        updateRestoreButtonState();
    });
    </script>
<style>
    .form-check-input {
        width: 18px;
        height: 18px;
        margin-top: 0;
        vertical-align: middle;
        border: 1px solid #dee2e6;
        cursor: pointer;
    }

        .form-check-input:checked {
            background-color: #28a745;
            border-color: #28a745;
        }

        .form-check-input:indeterminate {
            background-color: #ffc107;
            border-color: #ffc107;
        }

    th .form-check-input {
        margin: 0;
    }</style>