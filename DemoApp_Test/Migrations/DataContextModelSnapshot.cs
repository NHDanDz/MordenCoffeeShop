// <auto-generated />
using System;
using DemoApp_Test.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DemoApp_Test.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DemoApp_Test.Models.Account", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Client_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Username");

                    b.HasIndex("Client_id");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("DemoApp_Test.Models.Bill", b =>
                {
                    b.Property<string>("Bill_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Client_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PaymentStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ProcessDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Bill_id");

                    b.HasIndex("Client_id");

                    b.ToTable("Bill");
                });

            modelBuilder.Entity("DemoApp_Test.Models.Bill_Voucher", b =>
                {
                    b.Property<string>("Voucher_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Bill_id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Voucher_id", "Bill_id");

                    b.HasIndex("Bill_id");

                    b.ToTable("Bill_Voucher");
                });

            modelBuilder.Entity("DemoApp_Test.Models.Brand", b =>
                {
                    b.Property<string>("Brand_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FoundingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Brand_id");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("DemoApp_Test.Models.Client", b =>
                {
                    b.Property<string>("Client_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Client_id");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("DemoApp_Test.Models.Ice", b =>
                {
                    b.Property<string>("Ice_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IceDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Ice_id");

                    b.ToTable("Ice");
                });

            modelBuilder.Entity("DemoApp_Test.Models.Product", b =>
                {
                    b.Property<string>("Product_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Brand_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Discount")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Rating")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<int?>("ReviewCount")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Type_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Product_id");

                    b.HasIndex("Brand_id");

                    b.HasIndex("Type_id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("DemoApp_Test.Models.Product_Bill", b =>
                {
                    b.Property<string>("Product_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Bill_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Product_id", "Bill_id");

                    b.HasIndex("Bill_id");

                    b.ToTable("Product_Bill");
                });

            modelBuilder.Entity("DemoApp_Test.Models.Product_Ice", b =>
                {
                    b.Property<string>("Ice_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Product_id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Ice_id", "Product_id");

                    b.HasIndex("Product_id");

                    b.ToTable("Product_Ice");
                });

            modelBuilder.Entity("DemoApp_Test.Models.Product_Size", b =>
                {
                    b.Property<string>("Size_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Product_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Size_id", "Product_id");

                    b.HasIndex("Product_id");

                    b.ToTable("Product_Size");
                });

            modelBuilder.Entity("DemoApp_Test.Models.Product_Sugar", b =>
                {
                    b.Property<string>("Sugar_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Product_id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Sugar_id", "Product_id");

                    b.HasIndex("Product_id");

                    b.ToTable("Product_Sugar");
                });

            modelBuilder.Entity("DemoApp_Test.Models.Shipping", b =>
                {
                    b.Property<string>("Shipping_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Bill_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bill_id1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Shipping_id");

                    b.HasIndex("Bill_id1");

                    b.ToTable("Shipping");
                });

            modelBuilder.Entity("DemoApp_Test.Models.Size", b =>
                {
                    b.Property<string>("Size_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SizeDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Size_id");

                    b.ToTable("Size");
                });

            modelBuilder.Entity("DemoApp_Test.Models.Sugar", b =>
                {
                    b.Property<string>("Sugar_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SugarDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Sugar_id");

                    b.ToTable("Sugar");
                });

            modelBuilder.Entity("DemoApp_Test.Models.TypeCoffee", b =>
                {
                    b.Property<string>("Type_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Type_id");

                    b.ToTable("TypeCoffee");
                });

            modelBuilder.Entity("DemoApp_Test.Models.Voucher", b =>
                {
                    b.Property<string>("Voucher_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Detail")
                        .HasColumnType("float");

                    b.Property<string>("ExpirationDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("VoucherType")
                        .HasColumnType("bit");

                    b.HasKey("Voucher_id");

                    b.ToTable("Voucher");
                });

            modelBuilder.Entity("DemoApp_Test.Models.Account", b =>
                {
                    b.HasOne("DemoApp_Test.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("Client_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DemoApp_Test.Models.Bill", b =>
                {
                    b.HasOne("DemoApp_Test.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("Client_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DemoApp_Test.Models.Bill_Voucher", b =>
                {
                    b.HasOne("DemoApp_Test.Models.Bill", "Bill")
                        .WithMany()
                        .HasForeignKey("Bill_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DemoApp_Test.Models.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("Voucher_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("DemoApp_Test.Models.Product", b =>
                {
                    b.HasOne("DemoApp_Test.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("Brand_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DemoApp_Test.Models.TypeCoffee", "TypeCoffee")
                        .WithMany()
                        .HasForeignKey("Type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("TypeCoffee");
                });

            modelBuilder.Entity("DemoApp_Test.Models.Product_Bill", b =>
                {
                    b.HasOne("DemoApp_Test.Models.Bill", "Bill")
                        .WithMany()
                        .HasForeignKey("Bill_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DemoApp_Test.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("Product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DemoApp_Test.Models.Product_Ice", b =>
                {
                    b.HasOne("DemoApp_Test.Models.Ice", "Ice")
                        .WithMany()
                        .HasForeignKey("Ice_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DemoApp_Test.Models.Product", "Product")
                        .WithMany("Product_Ice")
                        .HasForeignKey("Product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DemoApp_Test.Models.Product_Size", b =>
                {
                    b.HasOne("DemoApp_Test.Models.Product", "Product")
                        .WithMany("Product_Size")
                        .HasForeignKey("Product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DemoApp_Test.Models.Size", "Size")
                        .WithMany()
                        .HasForeignKey("Size_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("DemoApp_Test.Models.Product_Sugar", b =>
                {
                    b.HasOne("DemoApp_Test.Models.Product", "Product")
                        .WithMany("Product_Sugar")
                        .HasForeignKey("Product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DemoApp_Test.Models.Sugar", "Sugar")
                        .WithMany()
                        .HasForeignKey("Sugar_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Sugar");
                });

            modelBuilder.Entity("DemoApp_Test.Models.Shipping", b =>
                {
                    b.HasOne("DemoApp_Test.Models.Bill", "Bill")
                        .WithMany()
                        .HasForeignKey("Bill_id1");

                    b.Navigation("Bill");
                });

            modelBuilder.Entity("DemoApp_Test.Models.Product", b =>
                {
                    b.Navigation("Product_Ice");

                    b.Navigation("Product_Size");

                    b.Navigation("Product_Sugar");
                });
#pragma warning restore 612, 618
        }
    }
}
